["```py\nfrom  os.path  import basename, exists\n\ndef  download(url):\n    filename = basename(url)\n    if not exists(filename):\n        from  urllib.request  import urlretrieve\n\n        local, _ = urlretrieve(url, filename)\n        print(\"Downloaded \" + local)\n\ndownload(\"https://github.com/AllenDowney/ThinkStats/raw/v3/nb/thinkstats.py\") \n```", "```py\ntry:\n    import  empiricaldist\nexcept ImportError:\n    %pip install empiricaldist \n```", "```py\nimport  numpy  as  np\nimport  pandas  as  pd\nimport  matplotlib.pyplot  as  plt\n\nfrom  IPython.display  import HTML\nfrom  thinkstats  import decorate \n```", "```py\ndownload(\"https://github.com/AllenDowney/ThinkStats/raw/v3/data/2002FemPreg.dct\")\ndownload(\"https://github.com/AllenDowney/ThinkStats/raw/v3/data/2002FemPreg.dat.gz\") \n```", "```py\ntry:\n    import  statadict\nexcept ImportError:\n    %pip install statadict \n```", "```py\ndct_file = \"2002FemPreg.dct\"\ndat_file = \"2002FemPreg.dat.gz\" \n```", "```py\nfrom  statadict  import parse_stata_dict\n\ndef  read_stata(dct_file, dat_file):\n    stata_dict = parse_stata_dict(dct_file)\n    resp = pd.read_fwf(\n        dat_file,\n        names=stata_dict.names,\n        colspecs=stata_dict.colspecs,\n        compression=\"gzip\",\n    )\n    return resp \n```", "```py\npreg = read_stata(dct_file, dat_file) \n```", "```py\npreg.shape \n```", "```py\n(13593, 243) \n```", "```py\npreg.head() \n```", "```py\npreg.columns \n```", "```py\nIndex(['caseid', 'pregordr', 'howpreg_n', 'howpreg_p', 'moscurrp', 'nowprgdk',\n       'pregend1', 'pregend2', 'nbrnaliv', 'multbrth',\n       ...\n       'poverty_i', 'laborfor_i', 'religion_i', 'metro_i', 'basewgt',\n       'adj_mod_basewgt', 'finalwgt', 'secu_p', 'sest', 'cmintvw'],\n      dtype='object', length=243) \n```", "```py\npregordr = preg[\"pregordr\"]\ntype(pregordr) \n```", "```py\npandas.core.series.Series \n```", "```py\npregordr.head() \n```", "```py\n0    1\n1    2\n2    1\n3    2\n4    3\nName: pregordr, dtype: int64 \n```", "```py\npreg[\"outcome\"].value_counts().sort_index() \n```", "```py\noutcome\n1    9148\n2    1862\n3     120\n4    1921\n5     190\n6     352\nName: count, dtype: int64 \n```", "```py\ncounts = preg[\"birthwgt_lb\"].value_counts(dropna=False).sort_index()\ncounts \n```", "```py\nbirthwgt_lb\n0.0        8\n1.0       40\n2.0       53\n3.0       98\n4.0      229\n5.0      697\n6.0     2223\n7.0     3049\n8.0     1889\n9.0      623\n10.0     132\n11.0      26\n12.0      10\n13.0       3\n14.0       3\n15.0       1\n51.0       1\n97.0       1\n98.0       1\n99.0      57\nNaN     4449\nName: count, dtype: int64 \n```", "```py\ncounts.loc[0:5] \n```", "```py\nbirthwgt_lb\n0.0      8\n1.0     40\n2.0     53\n3.0     98\n4.0    229\n5.0    697\nName: count, dtype: int64 \n```", "```py\ncounts.loc[0:5].sum() \n```", "```py\nnp.int64(1125) \n```", "```py\npreg[\"birthwgt_lb\"] = preg[\"birthwgt_lb\"].replace([51, 97, 98, 99], np.nan) \n```", "```py\npreg[\"agepreg\"].mean() \n```", "```py\nnp.float64(2468.8151197039497) \n```", "```py\npreg[\"agepreg\"] /= 100.0\npreg[\"agepreg\"].mean() \n```", "```py\nnp.float64(24.6881511970395) \n```", "```py\npreg[\"birthwgt_oz\"].value_counts(dropna=False).sort_index() \n```", "```py\nbirthwgt_oz\n0.0     1037\n1.0      408\n2.0      603\n3.0      533\n4.0      525\n5.0      535\n6.0      709\n7.0      501\n8.0      756\n9.0      505\n10.0     475\n11.0     557\n12.0     555\n13.0     487\n14.0     475\n15.0     378\n97.0       1\n98.0       1\n99.0      46\nNaN     4506\nName: count, dtype: int64 \n```", "```py\npreg[\"birthwgt_oz\"] = preg[\"birthwgt_oz\"].replace([97, 98, 99], np.nan) \n```", "```py\npreg[\"totalwgt_lb\"] = preg[\"birthwgt_lb\"] + preg[\"birthwgt_oz\"] / 16.0\npreg[\"totalwgt_lb\"].mean() \n```", "```py\nnp.float64(7.265628457623368) \n```", "```py\nweights = preg[\"totalwgt_lb\"]\nn = weights.count()\nn \n```", "```py\nnp.int64(9038) \n```", "```py\nmean = weights.sum() / n\nmean \n```", "```py\nnp.float64(7.265628457623368) \n```", "```py\nweights.mean() \n```", "```py\nnp.float64(7.265628457623368) \n```", "```py\nsquared_deviations = (weights - mean) ** 2 \n```", "```py\nvar = squared_deviations.sum() / n\nvar \n```", "```py\nnp.float64(1.983070989750022) \n```", "```py\nweights.var() \n```", "```py\nnp.float64(1.9832904288326545) \n```", "```py\nweights.var(ddof=0) \n```", "```py\nnp.float64(1.983070989750022) \n```", "```py\nstd = np.sqrt(var)\nstd \n```", "```py\nnp.float64(1.40821553384062) \n```", "```py\nweights.std(ddof=0) \n```", "```py\nnp.float64(1.40821553384062) \n```", "```py\nsubset = preg.query(\"caseid == 10229\")\nsubset.shape \n```", "```py\n(7, 244) \n```", "```py\nsubset[\"outcome\"].values \n```", "```py\narray([4, 4, 4, 4, 4, 4, 1]) \n```"]