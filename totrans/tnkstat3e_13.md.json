["```py\nfrom  os.path  import basename, exists\n\ndef  download(url):\n    filename = basename(url)\n    if not exists(filename):\n        from  urllib.request  import urlretrieve\n\n        local, _ = urlretrieve(url, filename)\n        print(\"Downloaded \" + local)\n\ndownload(\"https://github.com/AllenDowney/ThinkStats/raw/v3/nb/thinkstats.py\") \n```", "```py\ntry:\n    import  empiricaldist\nexcept ImportError:\n    %pip install empiricaldist \n```", "```py\nimport  numpy  as  np\nimport  pandas  as  pd\nimport  matplotlib.pyplot  as  plt\n\nfrom  thinkstats  import decorate \n```", "```py\ndownload(\n    \"https://raw.githubusercontent.com/allisonhorst/palmerpenguins/c19a904462482430170bfe2c718775ddb7dbb885/inst/extdata/penguins_raw.csv\"\n) \n```", "```py\ncolumns = {\n    \"Body Mass (g)\": \"mass\",\n    \"Flipper Length (mm)\": \"flipper_length\",\n    \"Culmen Length (mm)\": \"culmen_length\",\n    \"Culmen Depth (mm)\": \"culmen_depth\",\n} \n```", "```py\npenguins = (\n    pd.read_csv(\"penguins_raw.csv\")\n    .dropna(subset=[\"Body Mass (g)\"])\n    .rename(columns=columns)\n)\npenguins.shape \n```", "```py\n(342, 17) \n```", "```py\nadelie = penguins.query('Species.str.startswith(\"Adelie\")').copy()\nlen(adelie) \n```", "```py\n151 \n```", "```py\nflipper_length = adelie[\"flipper_length\"]\nbody_mass = adelie[\"mass\"] \n```", "```py\nfrom  scipy.stats  import linregress\n\nresult_linregress = linregress(flipper_length, body_mass)\nresult_linregress.intercept, result_linregress.slope \n```", "```py\n(np.float64(-2535.8368022002514), np.float64(32.83168975115009)) \n```", "```py\nformula = \"mass ~ flipper_length\" \n```", "```py\nimport  statsmodels.formula.api  as  smf\n\nmodel = smf.ols(formula, data=adelie)\ntype(model) \n```", "```py\nstatsmodels.regression.linear_model.OLS \n```", "```py\nresult_ols = model.fit() \n```", "```py\n# Technically it's a RegressionResultsWrapper\n\ntype(result_ols) \n```", "```py\nstatsmodels.regression.linear_model.RegressionResultsWrapper \n```", "```py\nfrom  thinkstats  import display_summary\n\ndisplay_summary(result_ols) \n```", "```py\nresult_linregress.intercept, result_linregress.slope \n```", "```py\n(np.float64(-2535.8368022002514), np.float64(32.83168975115009)) \n```", "```py\nresult_linregress.intercept_stderr, result_linregress.stderr, \n```", "```py\n(np.float64(964.7984274994059), np.float64(5.076138407990821)) \n```", "```py\nresult_ols.pvalues[\"flipper_length\"] \n```", "```py\nnp.float64(1.3432645947789321e-09) \n```", "```py\nresult_linregress.pvalue \n```", "```py\nnp.float64(1.3432645947790051e-09) \n```", "```py\nresult_ols.rsquared, result_linregress.rvalue**2 \n```", "```py\n(np.float64(0.21921282646854878), np.float64(0.21921282646854875)) \n```", "```py\nformula = \"mass ~ culmen_length\"\nresult = smf.ols(formula, data=adelie).fit()\ndisplay_summary(result) \n```", "```py\nformula = \"mass ~ flipper_length + culmen_length\" \n```", "```py\nresult = smf.ols(formula, data=adelie).fit()\ndisplay_summary(result) \n```", "```py\nfrom  thinkstats  import corrcoef\n\ncorrcoef(adelie, \"flipper_length\", \"culmen_length\") \n```", "```py\nnp.float64(0.32578471516515944) \n```", "```py\nformula = \"mass ~ flipper_length + culmen_length + culmen_depth\"\nresult = smf.ols(formula, data=adelie).fit()\ndisplay_summary(result) \n```", "```py\n[\n    corrcoef(adelie, \"culmen_depth\", \"flipper_length\"),\n    corrcoef(adelie, \"culmen_depth\", \"culmen_length\"),\n] \n```", "```py\n[np.float64(0.30762017939668534), np.float64(0.39149169183587634)] \n```", "```py\ndownload(\"https://github.com/AllenDowney/ThinkStats/raw/v3/nb/nsfg.py\")\ndownload(\"https://github.com/AllenDowney/ThinkStats/raw/v3/data/2002FemPreg.dct\")\ndownload(\"https://github.com/AllenDowney/ThinkStats/raw/v3/data/2002FemPreg.dat.gz\") \n```", "```py\ntry:\n    import  statadict\nexcept ImportError:\n    %pip install statadict \n```", "```py\nfrom  nsfg  import get_nsfg_groups\n\nlive, firsts, others = get_nsfg_groups() \n```", "```py\nvalid = live.dropna(subset=[\"agepreg\", \"birthord\", \"totalwgt_lb\"]).copy() \n```", "```py\nformula = \"totalwgt_lb ~ agepreg\"\nresult_age = smf.ols(formula, data=valid).fit()\ndisplay_summary(result_age) \n```", "```py\ntotalwgt = valid[\"totalwgt_lb\"]\nagepreg = valid[\"agepreg\"] \n```", "```py\nagepreg_range = np.linspace(agepreg.min(), agepreg.max()) \n```", "```py\ndf = pd.DataFrame({\"agepreg\": agepreg_range}) \n```", "```py\nfit_ys = result_age.predict(df) \n```", "```py\nplt.scatter(agepreg, totalwgt, marker=\".\", alpha=0.1, s=5)\nplt.plot(agepreg_range, fit_ys, color=\"C1\", label=\"linear model\")\n\ndecorate(xlabel=\"Maternal age\", ylabel=\"Birth weight (pounds)\") \n```", "```py\nvalid[\"is_first\"] = valid[\"birthord\"] == 1 \n```", "```py\nfrom  thinkstats  import value_counts\n\n# check the results\nvalue_counts(valid[\"is_first\"]) \n```", "```py\nis_first\nFalse    4675\nTrue     4363\nName: count, dtype: int64 \n```", "```py\nformula = \"totalwgt_lb ~ C(is_first)\" \n```", "```py\nresult_first = smf.ols(formula, data=valid).fit()\ndisplay_summary(result_first) \n```", "```py\nothers[\"totalwgt_lb\"].mean() \n```", "```py\nnp.float64(7.325855614973262) \n```", "```py\ndiff_weight = firsts[\"totalwgt_lb\"].mean() - others[\"totalwgt_lb\"].mean()\ndiff_weight \n```", "```py\nnp.float64(-0.12476118453549034) \n```", "```py\ndiff_age = firsts[\"agepreg\"].mean() - others[\"agepreg\"].mean()\ndiff_age \n```", "```py\nnp.float64(-3.5864347661500275) \n```", "```py\nslope = result_age.params[\"agepreg\"]\nslope \n```", "```py\nnp.float64(0.017453851471802638) \n```", "```py\nslope * diff_age \n```", "```py\nnp.float64(-0.0625970997216918) \n```", "```py\nformula = \"totalwgt_lb ~ agepreg + C(is_first)\"\nresult = smf.ols(formula, data=valid).fit()\ndisplay_summary(result) \n```", "```py\nvalid[\"agepreg2\"] = valid[\"agepreg\"] ** 2 \n```", "```py\nformula = \"totalwgt_lb ~ agepreg + agepreg2\" \n```", "```py\nresult_age2 = smf.ols(formula, data=valid).fit()\ndisplay_summary(result_age2) \n```", "```py\ndf = pd.DataFrame({\"agepreg\": agepreg_range})\ndf[\"agepreg2\"] = df[\"agepreg\"] ** 2 \n```", "```py\nfit_ys = result_age2.predict(df) \n```", "```py\nplt.scatter(agepreg, totalwgt, marker=\".\", alpha=0.1, s=5)\nplt.plot(agepreg_range, fit_ys, color=\"C1\", label=\"quadratic model\")\n\ndecorate(xlabel=\"Maternal age\", ylabel=\"Birth weight (pounds)\") \n```", "```py\nformula = \"totalwgt_lb ~ agepreg + agepreg2 + C(is_first)\"\nresult = smf.ols(formula, data=valid).fit()\ndisplay_summary(result) \n```", "```py\nadelie[\"y\"] = (adelie[\"Sex\"] == \"MALE\").astype(int) \n```", "```py\nadelie[\"y\"].value_counts() \n```", "```py\ny\n0    78\n1    73\nName: count, dtype: int64 \n```", "```py\nmodel = smf.logit(\"y ~ mass\", data=adelie)\nresult = model.fit(disp=False) \n```", "```py\ndisplay_summary(result) \n```", "```py\nmass = adelie[\"mass\"]\nmass_range = np.linspace(mass.min(), mass.max())\ndf = pd.DataFrame({\"mass\": mass_range})\nfit_ys = result.predict(df) \n```", "```py\nplt.plot(mass_range, fit_ys)\n\ndecorate(xlabel=\"Mass (g)\", ylabel=\"Prob(male)\") \n```", "```py\nformula = \"y ~ mass + flipper_length + culmen_length + culmen_depth\"\nmodel = smf.logit(formula, data=adelie)\nresult = model.fit(disp=False)\ndisplay_summary(result) \n```", "```py\ndef  plot_predictions(mass_range, culmen_length, **options):\n  \"\"\"Plot predicted probabilities as a function of mass.\"\"\"\n    df = pd.DataFrame({\"mass\": mass_range})\n    df[\"flipper_length\"] = adelie[\"flipper_length\"].mean()\n    df[\"culmen_length\"] = culmen_length\n    df[\"culmen_depth\"] = adelie[\"culmen_depth\"].mean()\n    fit_ys = result.predict(df)\n    plt.plot(mass_range, fit_ys, **options) \n```", "```py\nculmen_length = adelie[\"culmen_length\"]\nm, s = culmen_length.mean(), culmen_length.std() \n```", "```py\nplot_predictions(mass_range, m + s, ls=\"--\", label=\"Above average culmen length\")\nplot_predictions(mass_range, m, alpha=0.5, label=\"Average culmen length\")\nplot_predictions(mass_range, m - s, ls=\":\", label=\"Below average culmen length\")\n\ndecorate(xlabel=\"Mass (g)\", ylabel=\"Prob(male)\") \n```", "```py\ndef  get_species(penguins, species):\n    df = penguins.query(f'Species.str.startswith(\"{species}\")').copy()\n    df[\"y\"] = (df[\"Sex\"] == \"MALE\").astype(int)\n    return df \n```", "```py\ngentoo = get_species(penguins, \"Gentoo\")\nlen(gentoo) \n```", "```py\n123 \n```", "```py\nformula = \"y ~ mass + flipper_length + culmen_length + culmen_depth\"\nmodel = smf.logit(formula, data=gentoo)\nresult = model.fit(disp=False)\ndisplay_summary(result) \n```", "```py\nvalid[\"y\"] = (valid[\"babysex\"] == 1).astype(int) \n```", "```py\nchinstrap = get_species(penguins, \"Chinstrap\")\nlen(chinstrap) \n```", "```py\n68 \n```"]