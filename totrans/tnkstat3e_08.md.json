["```py\nfrom  os.path  import basename, exists\n\ndef  download(url):\n    filename = basename(url)\n    if not exists(filename):\n        from  urllib.request  import urlretrieve\n\n        local, _ = urlretrieve(url, filename)\n        print(\"Downloaded \" + local)\n\ndownload(\"https://github.com/AllenDowney/ThinkStats/raw/v3/nb/thinkstats.py\") \n```", "```py\ntry:\n    import  empiricaldist\nexcept ImportError:\n    %pip install empiricaldist \n```", "```py\nimport  numpy  as  np\nimport  pandas  as  pd\nimport  matplotlib.pyplot  as  plt\n\nfrom  thinkstats  import decorate \n```", "```py\ndownload(\"https://github.com/AllenDowney/ThinkStats/raw/v3/nb/nsfg.py\")\ndownload(\"https://github.com/AllenDowney/ThinkStats/raw/v3/data/2002FemResp.dct\")\ndownload(\"https://github.com/AllenDowney/ThinkStats/raw/v3/data/2002FemResp.dat.gz\") \n```", "```py\ntry:\n    import  statadict\nexcept ImportError:\n    %pip install statadict \n```", "```py\nfrom  nsfg  import read_fem_resp\n\nresp = read_fem_resp() \n```", "```py\nolder = resp.query(\"age >= 25\")\nnum_family = older[\"numfmhh\"] \n```", "```py\nfrom  empiricaldist  import Pmf\n\npmf_family = Pmf.from_seq(num_family, name=\"data\") \n```", "```py\nfrom  thinkstats  import poisson_pmf\n\nlam = 2.2\nks = np.arange(11)\nps = poisson_pmf(ks, lam)\n\npmf_poisson = Pmf(ps, ks, name=\"Poisson model\") \n```", "```py\nfrom  thinkstats  import two_bar_plots\n\ntwo_bar_plots(pmf_family, pmf_poisson)\ndecorate(xlabel=\"Number of family members\") \n```", "```py\ncdf_family = pmf_family.make_cdf()\ncdf_poisson = pmf_poisson.make_cdf() \n```", "```py\nfrom  thinkstats  import two_cdf_plots\n\ntwo_cdf_plots(cdf_poisson, cdf_family)\ndecorate(xlabel=\"Number of family members\") \n```", "```py\ndownload(\"https://github.com/AllenDowney/ThinkStats/raw/v3/data/2002FemPreg.dct\")\ndownload(\"https://github.com/AllenDowney/ThinkStats/raw/v3/data/2002FemPreg.dat.gz\") \n```", "```py\nfrom  nsfg  import read_fem_preg\n\npreg = read_fem_preg()\nbirth_weights = preg[\"totalwgt_lb\"].dropna() \n```", "```py\nfrom  scipy.stats  import trimboth\nfrom  thinkstats  import make_normal_model\n\ntrimmed = trimboth(birth_weights, 0.01)\ncdf_model = make_normal_model(trimmed) \n```", "```py\nfrom  empiricaldist  import Cdf\n\ncdf_birth_weight = Cdf.from_seq(birth_weights, name=\"sample\")\ntwo_cdf_plots(cdf_model, cdf_birth_weight, xlabel=\"Birth weight (pounds)\") \n```", "```py\ndef  normal_pdf(xs, mu, sigma):\n  \"\"\"Evaluates the normal probability density function.\"\"\"\n    z = (xs - mu) / sigma\n    return np.exp(-(z**2) / 2) / sigma / np.sqrt(2 * np.pi) \n```", "```py\nm, s = np.mean(trimmed), np.std(trimmed) \n```", "```py\nlow = m - 4 * s\nhigh = m + 4 * s\nqs = np.linspace(low, high, 201)\nps = normal_pdf(qs, m, s) \n```", "```py\nplt.plot(qs, ps, label=\"normal model\", ls=\":\", color=\"gray\")\ndecorate(xlabel=\"Birth weight (pounds)\", ylabel=\"Density\") \n```", "```py\nnormal_pdf(m, m, s) \n```", "```py\nnp.float64(0.32093416297880123) \n```", "```py\nfrom  thinkstats  import NormalPdf\n\npdf_model = NormalPdf(m, s, name=\"normal model\")\npdf_model \n```", "```py\nNormalPdf(7.280883100022579, 1.2430657948614345, name='normal model') \n```", "```py\npdf_model(m) \n```", "```py\nnp.float64(0.32093416297880123) \n```", "```py\nfrom  scipy.integrate  import simpson\n\ndef  area_under(pdf, low, high):\n    qs = np.linspace(low, high, 501)\n    ps = pdf(qs)\n    return simpson(y=ps, x=qs) \n```", "```py\narea_under(pdf_model, 2, 12) \n```", "```py\nnp.float64(0.9999158086616793) \n```", "```py\narea_under(pdf_model, 0, 8.5) \n```", "```py\nnp.float64(0.8366380335513807) \n```", "```py\nfrom  scipy.stats  import norm\n\nnorm.cdf(8.5, m, s) \n```", "```py\nnp.float64(0.8366380358092718) \n```", "```py\narea_under(pdf_model, 6, 8) \n```", "```py\nnp.float64(0.5671317752927691) \n```", "```py\nnorm.cdf(8, m, s) - norm.cdf(6, m, s) \n```", "```py\nnp.float64(0.5671317752921801) \n```", "```py\ndef  exponential_cdf(x, lam):\n  \"\"\"Compute the exponential CDF.\n\n x: float or sequence of floats\n lam: rate parameter\n\n returns: float or NumPy array of cumulative probability\n \"\"\"\n    return 1 - np.exp(-lam * x) \n```", "```py\ndef  exponential_pdf(x, lam):\n  \"\"\"Evaluates the exponential PDF.\n\n x: float or sequence of floats\n lam: rate parameter\n\n returns: float or NumPy array of probability density\n \"\"\"\n    return lam * np.exp(-lam * x) \n```", "```py\nfrom  thinkstats  import ExponentialPdf\n\nlam = 6\npdf_expo = ExponentialPdf(lam, name=\"exponential model\")\npdf_expo \n```", "```py\nExponentialPdf(6, name='exponential model') \n```", "```py\nqs = np.linspace(0, 1.5, 201)\npdf_expo.plot(qs, ls=\":\", color=\"gray\")\ndecorate(xlabel=\"Time (games)\", ylabel=\"Density\") \n```", "```py\narea_under(pdf_expo, 0, 1.5) \n```", "```py\nnp.float64(0.999876590779019) \n```", "```py\nfrom  thinkstats  import exponential_cdf\n\nexponential_cdf(7, lam) \n```", "```py\nnp.float64(1.0) \n```", "```py\narea_under(pdf_expo, 0, 1 / 60) \n```", "```py\nnp.float64(0.09516258196404043) \n```", "```py\nexponential_cdf(1 / 60, lam) \n```", "```py\nnp.float64(0.09516258196404048) \n```", "```py\npmf_birth_weight = Pmf.from_seq(birth_weights, name=\"data\") \n```", "```py\npdf_model.plot(ls=\":\", color=\"gray\")\npmf_birth_weight.plot()\n\ndecorate(xlabel=\"Birth weight (pounds)\", ylabel=\"PMF? Density?\") \n```", "```py\npmf_model = pdf_model.make_pmf() \n```", "```py\npmf_model.plot(ls=\":\", color=\"gray\")\npmf_birth_weight.plot()\n\ndecorate(xlabel=\"Birth weight (pounds)\", ylabel=\"PMF\") \n```", "```py\nlen(pmf_model), len(pmf_birth_weight) \n```", "```py\n(201, 184) \n```", "```py\n# Set the random seed so we get the same results every time\nnp.random.seed(3) \n```", "```py\nn = 10\nsample = birth_weights.sample(n) \n```", "```py\nfor weight in sample:\n    pmf = Pmf.from_seq([weight]) / n\n    pmf.bar(width=0.08, alpha=0.5)\n\nxlim = [1.5, 12.5]\ndecorate(xlabel=\"Birth weight (pounds)\", ylabel=\"PMF\", xlim=xlim) \n```", "```py\nqs = np.linspace(2, 12, 201)\n\nfor weight in sample:\n    ps = NormalPdf(weight, 0.75)(qs) / n\n    plt.plot(qs, ps, alpha=0.5)\n\ndecorate(xlabel=\"Birth weight (pounds)\", ylabel=\"PDF\", xlim=xlim) \n```", "```py\nlow_ps = np.zeros_like(qs)\n\nfor weight in sample:\n    ps = NormalPdf(weight, 0.75)(qs) / n\n    high_ps = low_ps + ps\n    plt.fill_between(qs, low_ps, high_ps, alpha=0.5, lw=1, ec=\"white\")\n    low_ps = high_ps\n\ndecorate(xlabel=\"Birth weight (pounds)\", ylabel=\"PDF\", xlim=xlim) \n```", "```py\nfrom  scipy.stats  import gaussian_kde\n\nkde = gaussian_kde(birth_weights) \n```", "```py\nps = kde(qs) \n```", "```py\nplt.plot(qs, ps)\n\ndecorate(xlabel=\"Birth weight (pounds)\", ylabel=\"Density\") \n```", "```py\nfrom  thinkstats  import Pdf\n\ndomain = np.min(birth_weights), np.max(birth_weights)\nkde_birth_weights = Pdf(kde, domain, name=\"data\") \n```", "```py\npdf_model.plot(ls=\":\", color=\"gray\")\nkde_birth_weights.plot()\n\ndecorate(xlabel=\"Birth weight (pounds)\", ylabel=\"Density\") \n```", "```py\ndownload(\"https://github.com/AllenDowney/ThinkStats/raw/v3/data/babyboom.dat\") \n```", "```py\nfrom  thinkstats  import read_baby_boom\n\nboom = read_baby_boom()\nboom.head() \n```", "```py\ndiffs = boom[\"minutes\"].diff().dropna() \n```", "```py\npmf_diffs = Pmf.from_seq(diffs, name=\"data\")\npmf_diffs.bar(width=1)\n\ndecorate(xlabel=\"Interval (minutes)\", ylabel=\"PMF\") \n```", "```py\ncdf_diffs = pmf_diffs.make_cdf()\ncdf_diffs.step()\n\ndecorate(xlabel=\"Interval (minutes)\", ylabel=\"CDF\") \n```", "```py\npmf_diffs2 = cdf_diffs.make_pmf() \n```", "```py\nnp.allclose(pmf_diffs, pmf_diffs2) \n```", "```py\nTrue \n```", "```py\nkde = gaussian_kde(pmf_diffs.qs, weights=pmf_diffs.ps) \n```", "```py\ndomain = np.min(pmf_diffs.qs), np.max(pmf_diffs.qs)\nkde_diffs = Pdf(kde, domain=domain, name=\"estimated density\")\n\nkde_diffs.plot(ls=\":\", color=\"gray\")\ndecorate(xlabel=\"Interval (minutes)\", ylabel=\"Density\") \n```", "```py\nfrom  thinkstats  import ExponentialCdf\n\nm = diffs.mean()\nlam = 1 / m\ncdf_model = ExponentialCdf(lam, name=\"exponential CDF\") \n```", "```py\ncdf_model.plot(ls=\":\", color=\"gray\")\ncdf_diffs.step()\n\ndecorate(xlabel=\"Interval (minutes)\", ylabel=\"CDF\") \n```", "```py\nqs = np.linspace(0, 160)\ndiscrete_cdf_model = cdf_model.make_cdf(qs)\ndiscrete_cdf_model.step(color=\"gray\")\n\ndecorate(xlabel=\"Interval (minutes)\", ylabel=\"CDF\") \n```", "```py\ndiscrete_cdf_model.plot(color=\"gray\")\n\ndecorate(xlabel=\"Interval (minutes)\", ylabel=\"CDF\") \n```", "```py\nimport  sympy  as  sp\n\nx = sp.Symbol(\"x\", real=True, positive=True)\nλ = sp.Symbol(\"λ\", real=True, positive=True)\n\ncdf = 1 - sp.exp(-λ * x)\ncdf \n```", "```py\npdf = sp.diff(cdf, x)\npdf \n```", "```py\nsp.integrate(pdf, x) \n```", "```py\ndownload(\"https://github.com/AllenDowney/ThinkStats/raw/v3/data/CDBRFS08.ASC.gz\") \n```", "```py\nfrom  thinkstats  import read_brfss\n\nbrfss = read_brfss()\nmale = brfss.query(\"sex == 1\")\nheights = male[\"htm3\"].dropna() \n```", "```py\nfrom  scipy.stats  import trimboth\n\ntrimmed = trimboth(heights, 0.01)\nm, s = np.mean(trimmed), np.std(trimmed)\nm, s \n```", "```py\n(np.float64(178.10278947124948), np.float64(7.017054887136004)) \n```", "```py\nfrom  thinkstats  import NormalCdf\n\ncdf_normal_model = NormalCdf(m, s, name='normal model') \n```", "```py\ncdf_height = Cdf.from_seq(heights, name=\"data\")\ncdf_normal_model.plot(ls=\":\", color=\"gray\")\ncdf_height.step()\n\nxlim = [140, 210]\ndecorate(xlabel=\"Height (cm)\", ylabel=\"CDF\", xlim=xlim) \n```"]