["```py\nfrom  os.path  import basename, exists\n\ndef  download(url):\n    filename = basename(url)\n    if not exists(filename):\n        from  urllib.request  import urlretrieve\n\n        local, _ = urlretrieve(url, filename)\n        print(\"Downloaded \" + local)\n\ndownload(\"https://github.com/AllenDowney/ThinkStats/raw/v3/nb/thinkstats.py\") \n```", "```py\ntry:\n    import  empiricaldist\nexcept ImportError:\n    %pip install empiricaldist \n```", "```py\nimport  numpy  as  np\nimport  pandas  as  pd\nimport  matplotlib.pyplot  as  plt\n\nfrom  thinkstats  import decorate \n```", "```py\ndownload(\n    \"https://gist.github.com/epogrebnyak/7933e16c0ad215742c4c104be4fbdeb1/raw/c932bc5b6aa6317770c4cbf43eb591511fec08f9/lamps.csv\"\n) \n```", "```py\ndf = pd.read_csv(\"lamps.csv\", index_col=0)\ndf.tail() \n```", "```py\nfrom  empiricaldist  import Pmf\n\npmf_bulblife = Pmf(df[\"f\"].values, index=df[\"h\"])\npmf_bulblife.normalize() \n```", "```py\nnp.int64(50) \n```", "```py\ncdf_bulblife = pmf_bulblife.make_cdf()\ncdf_bulblife[1656] \n```", "```py\nnp.float64(0.7800000000000002) \n```", "```py\ncomplementary_cdf = 1 - cdf_bulblife\ncomplementary_cdf[1656] \n```", "```py\nnp.float64(0.21999999999999975) \n```", "```py\nsurv_bulblife = cdf_bulblife.make_surv()\nsurv_bulblife[1656] \n```", "```py\nnp.float64(0.21999999999999997) \n```", "```py\ncdf_bulblife.plot(ls=\"--\", label=\"CDF\")\nsurv_bulblife.plot(label=\"Survival\")\n\ndecorate(xlabel=\"Light bulb duration (hours)\", ylabel=\"Probability\") \n```", "```py\nat_risk = pmf_bulblife + surv_bulblife\nat_risk[1656] \n```", "```py\nnp.float64(0.25999999999999995) \n```", "```py\npmf_bulblife[1656] \n```", "```py\nnp.float64(0.04) \n```", "```py\nhazard = pmf_bulblife / at_risk\nhazard[1656] \n```", "```py\nnp.float64(0.15384615384615388) \n```", "```py\nhazard_bulblife = surv_bulblife.make_hazard()\nhazard_bulblife[1656] \n```", "```py\nnp.float64(0.15384615384615397) \n```", "```py\nhazard_bulblife.plot()\ndecorate(xlabel=\"Light bulb duration (hours)\", ylabel=\"Hazard\") \n```", "```py\ncumulative_hazard = hazard_bulblife.cumsum()\ncumulative_hazard.plot()\n\ndecorate(xlabel=\"Light bulb duration (hours)\", ylabel=\"Cumulative hazard\") \n```", "```py\nfilename = \"marriage_nsfg_female.csv.gz\"\ndownload(\"https://github.com/AllenDowney/ThinkStats/raw/v3/data/\" + filename) \n```", "```py\nresp = pd.read_csv(\"marriage_nsfg_female.csv.gz\")\nresp.shape \n```", "```py\n(70183, 34) \n```", "```py\nmonth0 = pd.to_datetime(\"1899-12-31\")\n\ndef  decade_of_birth(cmbirth):\n    date = month0 + pd.DateOffset(months=cmbirth)\n    return date.year // 10 * 10 \n```", "```py\nfrom  thinkstats  import value_counts\n\nresp[\"cohort\"] = resp[\"cmbirth\"].apply(decade_of_birth)\nvalue_counts(resp[\"cohort\"]) \n```", "```py\ncohort\n1930      325\n1940     3608\n1950    10631\n1960    14953\n1970    16438\n1980    14271\n1990     8552\n2000     1405\nName: count, dtype: int64 \n```", "```py\nresp[\"agemarr\"] = (resp[\"cmmarrhx\"] - resp[\"cmbirth\"]) / 12\nresp[\"age\"] = (resp[\"cmintvw\"] - resp[\"cmbirth\"]) / 12 \n```", "```py\nfrom  empiricaldist  import Surv\n\ndef  make_survival_map(resp, cohorts):\n    surv_map = {}\n\n    grouped = resp.groupby(\"cohort\")\n    for cohort in cohorts:\n        group = grouped.get_group(cohort)\n        surv_map[cohort] = Surv.from_seq(group[\"agemarr\"], dropna=False)\n\n    return surv_map \n```", "```py\ncohorts = [1980, 1960, 1940]\nsurv_map = make_survival_map(resp, cohorts) \n```", "```py\nimport  matplotlib.pyplot  as  plt\nimport  cycler\n\n# Extract the default color cycle\ndefault_colors = plt.rcParams[\"axes.prop_cycle\"].by_key()[\"color\"]\n\n# Define the desired line styles\nlinestyles = [\"--\", \"-\", \"-.\", \"--\", \"-\", \"-.\", \"--\", \"-\", \"-.\", \"--\"]\n\n# Ensure we cycle through styles and colors properly\ncustom_cycler = cycler.cycler(color=default_colors) + cycler.cycler(\n    linestyle=linestyles\n)\n\n# Apply the new cycler\nplt.rc(\"axes\", prop_cycle=custom_cycler) \n```", "```py\nfor cohort, surv in surv_map.items():\n    surv.plot(label=f\"{cohort}s\")\n\nylim = [-0.05, 1.05]\ndecorate(xlabel=\"Age\", ylabel=\"Prob never married\", ylim=ylim) \n```", "```py\ndef  resample_rows_weighted(df, column=\"finalwgt\"):\n    n = len(df)\n    weights = df[column]\n    return df.sample(n, weights=weights, replace=True) \n```", "```py\ndef  resample_cycles(resp):\n    grouped = resp.groupby(\"cycle\")\n    samples = [resample_rows_weighted(group) for _, group in grouped]\n    return pd.concat(samples) \n```", "```py\n# Seed the random number generator so we get the same results every time\nnp.random.seed(1) \n```", "```py\nsample = resample_cycles(resp) \n```", "```py\nfor label, surv in surv_map.items():\n    surv.plot(ls=\":\", color=\"gray\", alpha=0.6)\n\nsurvs_resampled = make_survival_map(sample, cohorts)\n\nfor label, surv in survs_resampled.items():\n    surv.plot(label=label)\n\ndecorate(xlabel=\"Age\", ylabel=\"Prob never married\", ylim=ylim) \n```", "```py\nplt.rc(\"axes\", prop_cycle=plt.rcParamsDefault[\"axes.prop_cycle\"]) \n```", "```py\nresp60 = sample.query(\"cohort == 1960\") \n```", "```py\ncomplete = resp60.query(\"evrmarry == 1\")[\"agemarr\"]\ncomplete.count() \n```", "```py\nnp.int64(9921) \n```", "```py\nongoing = resp60.query(\"evrmarry == 0\")[\"age\"]\nongoing.count() \n```", "```py\nnp.int64(5468) \n```", "```py\nfrom  empiricaldist  import FreqTab\n\nft_complete = FreqTab.from_seq(complete)\nft_ongoing = FreqTab.from_seq(ongoing) \n```", "```py\nft_complete[25] \n```", "```py\nnp.int64(58) \n```", "```py\nft_ongoing[25] \n```", "```py\nnp.int64(5) \n```", "```py\nsurv_complete = ft_complete.make_surv()\nsurv_ongoing = ft_ongoing.make_surv() \n```", "```py\nsurv_complete[25] \n```", "```py\nnp.int64(2848) \n```", "```py\nsurv_ongoing[25] \n```", "```py\nnp.int64(2273) \n```", "```py\nat_risk = ft_complete[25] + ft_ongoing[25] + surv_complete[25] + surv_ongoing[25]\nat_risk \n```", "```py\nnp.int64(5184) \n```", "```py\nhazard = ft_complete[25] / at_risk\nhazard \n```", "```py\nnp.float64(0.011188271604938271) \n```", "```py\nts = pd.Index.union(ft_complete.index, ft_ongoing.index) \n```", "```py\nat_risk = ft_complete(ts) + ft_ongoing(ts) + surv_complete(ts) + surv_ongoing(ts) \n```", "```py\nfrom  empiricaldist  import Hazard\n\nhs = ft_complete(ts) / at_risk\nhazard = Hazard(hs, ts) \n```", "```py\nhazard.cumsum().plot()\n\ndecorate(xlabel=\"Age\", ylabel=\"Cumulative hazard\") \n```", "```py\nps = (1 - hazard).cumprod() \n```", "```py\nsurv = hazard.make_surv() \n```", "```py\nsurvs_resampled[1960].plot(ls=\":\", color=\"gray\", label=\"resampled\")\nsurv.plot(label=\"Kaplan-Meier\")\n\ndecorate(xlabel=\"Age\", ylabel=\"Prob never married\", ylim=ylim) \n```", "```py\ndef  estimate_hazard(complete, ongoing):\n  \"\"\"Kaplan-Meier estimation.\"\"\"\n    ft_complete = FreqTab.from_seq(complete)\n    ft_ongoing = FreqTab.from_seq(ongoing)\n\n    surv_complete = ft_complete.make_surv()\n    surv_ongoing = ft_ongoing.make_surv()\n\n    ts = pd.Index.union(ft_complete.index, ft_ongoing.index)\n    at_risk = ft_complete(ts) + ft_ongoing(ts) + surv_complete(ts) + surv_ongoing(ts)\n\n    hs = ft_complete(ts) / at_risk\n    return Hazard(hs, ts) \n```", "```py\ndef  estimate_survival(group):\n  \"\"\"Estimate the survival function.\"\"\"\n    complete = group.query(\"evrmarry == 1\")[\"agemarr\"]\n    ongoing = group.query(\"evrmarry == 0\")[\"age\"]\n    hf = estimate_hazard(complete, ongoing)\n    sf = hf.make_surv()\n    return sf \n```", "```py\ntry:\n    import  lifelines\nexcept ImportError:\n    %pip install lifelines \n```", "```py\nsurv = estimate_survival(resp60) \n```", "```py\ncomplete = complete.dropna()\ndurations = np.concatenate([complete, ongoing])\nevent_observed = np.concatenate([np.ones(len(complete)), np.zeros(len(ongoing))]) \n```", "```py\nfrom  lifelines  import KaplanMeierFitter\n\nkmf = KaplanMeierFitter()\nkmf.fit(durations=durations, event_observed=event_observed) \n```", "```py\n<lifelines.KaplanMeierFitter:\"KM_estimate\", fitted with 15389 total observations, 5468 right-censored observations> \n```", "```py\nkmf.plot()\n\ndecorate(xlabel=\"Age\", ylabel=\"Prob never married\", ylim=ylim) \n```", "```py\nps = kmf.survival_function_[\"KM_estimate\"].drop(0)\nnp.allclose(ps, surv) \n```", "```py\nTrue \n```", "```py\ndef  estimate_survival_map(resp, cohorts):\n  \"\"\"Make a dictionary from cohorts to Surv objects.\"\"\"\n    surv_map = {}\n\n    grouped = resp.groupby(\"cohort\")\n    for cohort in cohorts:\n        group = grouped.get_group(cohort)\n        surv_map[cohort] = estimate_survival(group)\n\n    return surv_map \n```", "```py\ncohorts = [1940, 1950, 1960, 1970, 1980, 1990]\n\nsurv_maps = [estimate_survival_map(resample_cycles(resp), cohorts) for i in range(101)] \n```", "```py\ndef  plot_cohort(surv_maps, cohort, color):\n  \"\"\"Plot results for a single cohort.\"\"\"\n    survs = [surv_map[cohort] for surv_map in surv_maps]\n    for surv in survs:\n        surv.plot(color=color, alpha=0.05)\n\n    x, y = surv.index[-1], surv.iloc[-1]\n    plt.text(x + 1, y, f\"{cohort}s\", ha=\"left\", va=\"center\") \n```", "```py\ncolors = [f\"C{i}\" for i in range(len(cohorts))]\n\nfor cohort, color in zip(cohorts, colors):\n    plot_cohort(surv_maps, cohort, color)\n\nxlim = [8, 55]\ndecorate(xlabel=\"Age\", ylabel=\"Prob never married\", xlim=xlim, ylim=ylim) \n```", "```py\ndownload(\"https://github.com/AllenDowney/ThinkStats/raw/v3/nb/nsfg.py\")\ndownload(\"https://github.com/AllenDowney/ThinkStats/raw/v3/data/2002FemPreg.dct\")\ndownload(\"https://github.com/AllenDowney/ThinkStats/raw/v3/data/2002FemPreg.dat.gz\") \n```", "```py\ntry:\n    import  statadict\nexcept ImportError:\n    %pip install statadict \n```", "```py\nfrom  nsfg  import get_nsfg_groups\n\nlive, firsts, others = get_nsfg_groups() \n```", "```py\nsample = resample_rows_weighted(live, \"finalwgt\") \n```", "```py\npmf_durations = Pmf.from_seq(sample[\"prglngth\"]) \n```", "```py\nt = 36\nis_remaining = pmf_durations.qs >= t \n```", "```py\nps = pmf_durations.ps[is_remaining]\nqs = pmf_durations.qs[is_remaining] - t\n\npmf_remaining = Pmf(ps, qs) \n```", "```py\npmf_remaining.normalize() \n```", "```py\nnp.float64(0.9155006558810669) \n```", "```py\npmf_remaining.bar(label=\"Week 36\")\ndecorate(xlabel=\"Remaining duration (weeks)\", ylabel=\"PMF\") \n```", "```py\npmf_remaining.mean() \n```", "```py\nnp.float64(3.2145671641791043) \n```", "```py\ndef  compute_pmf_remaining(pmf, t):\n  \"\"\"Distribution of remaining time.\"\"\"\n    is_remaining = pmf.qs >= t\n    ps = pmf.ps[is_remaining]\n    qs = pmf.qs[is_remaining] - t\n    pmf_remaining = Pmf(ps, qs)\n    pmf_remaining.normalize()\n    return pmf_remaining \n```", "```py\ndef  expected_remaining(pmf):\n    index = range(36, 44)\n    expected = pd.Series(index=index)\n\n    for t in index:\n        pmf_remaining = compute_pmf_remaining(pmf, t)\n        expected[t] = pmf_remaining.mean()\n\n    return expected \n```", "```py\nexpected = expected_remaining(pmf_durations)\nexpected \n```", "```py\n36    3.214567\n37    2.337714\n38    1.479095\n39    0.610133\n40    0.912517\n41    0.784211\n42    0.582301\n43    0.589372\ndtype: float64 \n```", "```py\nfor i in range(21):\n    sample = resample_rows_weighted(live, \"finalwgt\")\n    pmf_durations = Pmf.from_seq(sample[\"prglngth\"])\n    expected = expected_remaining(pmf_durations)\n    expected.plot(color=\"C0\", alpha=0.1)\n\ndecorate(\n    xlabel=\"Weeks of pregnancy\", ylabel=\"Expected remaining time (weeks)\", ylim=[0, 3.4]\n) \n```", "```py\n# I suggest you use a single resampling of the data\n\nsample = resample_cycles(resp) \n```", "```py\ndownload(\n    \"https://github.com/AllenDowney/ThinkStats/raw/v3/data/mortality_rates_beltran2012.csv\"\n) \n```", "```py\nmortality = pd.read_csv(\"mortality_rates_beltran2012.csv\", header=[0, 1]).dropna() \n```", "```py\nfrom  scipy.interpolate  import interp1d\nfrom  empiricaldist  import Hazard\n\ndef  make_hazard(ages, rates):\n  \"\"\"Make a Hazard function by interpolating a Series.\n\n series: Series\n\n returns: Hazard\n \"\"\"\n    interp = interp1d(ages, rates, fill_value=\"extrapolate\")\n    xs = np.arange(0, 100)\n    ys = np.exp(interp(xs))\n    return Hazard(ys, xs) \n```", "```py\nages = mortality[\"1800\", \"X\"].values\nrates = mortality[\"1800\", \"Y\"].values\nhazard = make_hazard(ages, rates) \n```", "```py\nhazard.plot()\n\ndecorate(xlabel=\"Age (years)\", ylabel=\"Hazard\") \n```"]