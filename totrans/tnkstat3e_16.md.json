["```py\nfrom  os.path  import basename, exists\n\ndef  download(url):\n    filename = basename(url)\n    if not exists(filename):\n        from  urllib.request  import urlretrieve\n\n        local, _ = urlretrieve(url, filename)\n        print(\"Downloaded \" + local)\n\ndownload(\"https://github.com/AllenDowney/ThinkStats/raw/v3/nb/thinkstats.py\") \n```", "```py\ntry:\n    import  empiricaldist\nexcept ImportError:\n    %pip install empiricaldist \n```", "```py\nimport  numpy  as  np\nimport  pandas  as  pd\nimport  matplotlib.pyplot  as  plt\n\nfrom  thinkstats  import decorate \n```", "```py\ndownload(\n    \"https://raw.githubusercontent.com/allisonhorst/palmerpenguins/c19a904462482430170bfe2c718775ddb7dbb885/inst/extdata/penguins_raw.csv\"\n) \n```", "```py\npenguins = pd.read_csv(\"penguins_raw.csv\")\npenguins.shape \n```", "```py\n(344, 17) \n```", "```py\nadelie = penguins.query('Species.str.startswith(\"Adelie\")').copy()\nlen(adelie) \n```", "```py\n152 \n```", "```py\nfrom  empiricaldist  import Cdf\n\nweights = adelie[\"Body Mass (g)\"].dropna()\ncdf_weights = Cdf.from_seq(weights) \n```", "```py\nm, s = weights.mean(), weights.std()\nm, s \n```", "```py\n(np.float64(3700.662251655629), np.float64(458.5661259101348)) \n```", "```py\nfrom  scipy.stats  import norm\n\ndist = norm(m, s)\nqs = np.linspace(m - 3.5 * s, m + 3.5 * s)\nps = dist.cdf(qs) \n```", "```py\nmodel_options = dict(color=\"gray\", alpha=0.5, label=\"model\")\nplt.plot(qs, ps, **model_options)\ncdf_weights.plot(label=\"data\")\n\ndecorate(ylabel=\"CDF\") \n```", "```py\nys = np.sort(weights) \n```", "```py\nn = len(weights)\nps = (np.arange(n) + 0.5) / n\nxs = norm.ppf(ps) \n```", "```py\nfrom  scipy.stats  import linregress\n\nresults = linregress(xs, ys)\nintercept, slope = results.intercept, results.slope\n\nfit_xs = np.linspace(-3, 3)\nfit_ys = intercept + slope * fit_xs \n```", "```py\nplt.plot(fit_xs, fit_ys, **model_options)\nplt.plot(xs, ys, label=\"data\")\n\ndecorate(xlabel=\"Standard normal\", ylabel=\"Body mass (g)\") \n```", "```py\ndef  normal_probability_plot(sample, **options):\n  \"\"\"Makes a normal probability plot with a fitted line.\"\"\"\n    n = len(sample)\n    ps = (np.arange(n) + 0.5) / n\n    xs = norm.ppf(ps)\n    ys = np.sort(sample)\n\n    results = linregress(xs, ys)\n    intercept, slope = results.intercept, results.slope\n\n    fit_xs = np.linspace(-3, 3)\n    fit_ys = intercept + slope * fit_xs\n\n    plt.plot(fit_xs, fit_ys, color=\"gray\", alpha=0.5)\n    plt.plot(xs, ys, **options)\n    decorate(xlabel=\"Standard normal\") \n```", "```py\ngrouped = adelie.groupby(\"Sex\")\n\nweights_male = grouped.get_group(\"MALE\")[\"Body Mass (g)\"]\nnormal_probability_plot(weights_male, ls=\"--\", label=\"Male\")\n\nweights_female = grouped.get_group(\"FEMALE\")[\"Body Mass (g)\"]\nnormal_probability_plot(weights_female, label=\"Female\")\n\ndecorate(ylabel=\"Weight (g)\") \n```", "```py\nclass  Normal:\n  \"\"\"Represents a Normal distribution\"\"\"\n\n    def  __init__(self, mu, sigma2):\n  \"\"\"Make a Normal object.\n\n mu: mean\n sigma2: variance\n \"\"\"\n        self.mu = mu\n        self.sigma2 = sigma2\n\n    def  __repr__(self):\n  \"\"\"Returns a string representation.\"\"\"\n        return f\"Normal({self.mu}, {self.sigma2})\"\n\n    __str__ = __repr__ \n```", "```py\nm, s = weights_male.mean(), weights_male.std()\ndist_male = Normal(m, s**2)\ndist_male \n```", "```py\nNormal(4043.4931506849316, 120278.25342465754) \n```", "```py\nm, s = weights_female.mean(), weights_female.std()\ndist_female = Normal(m, s**2)\ndist_female \n```", "```py\nNormal(3368.8356164383563, 72565.63926940637) \n```", "```py\n%%add_method_to Normal\n\ndef sample(self, n):\n    \"\"\"Generate a random sample from this distribution.\"\"\"\n    sigma = np.sqrt(self.sigma2)\n    return np.random.normal(self.mu, sigma, n) \n```", "```py\nsample_sum = dist_male.sample(1000) + dist_female.sample(1000)\nnormal_probability_plot(sample_sum)\n\ndecorate(ylabel=\"Total weight (g)\") \n```", "```py\n%%add_method_to Normal\n\ndef __add__(self, other):\n    \"\"\"Distribution of the sum of two normal distributions.\"\"\"\n    return Normal(self.mu + other.mu, self.sigma2 + other.sigma2) \n```", "```py\ndist_sum = dist_male + dist_female\ndist_sum \n```", "```py\nNormal(7412.328767123288, 192843.8926940639) \n```", "```py\n%%add_method_to Normal\n\ndef plot_cdf(self, n_sigmas=3.5, **options):\n    \"\"\"Plot the CDF of this distribution.\"\"\"\n    mu, sigma = self.mu, np.sqrt(self.sigma2)\n    low, high = mu - n_sigmas * sigma, mu + n_sigmas * sigma\n    xs = np.linspace(low, high, 101)\n    ys = norm.cdf(xs, mu, sigma)\n    plt.plot(xs, ys, **options) \n```", "```py\ndist_sum.plot_cdf(**model_options)\nCdf.from_seq(sample_sum).plot(label=\"sample\")\n\ndecorate(xlabel=\"Total weight (g)\", ylabel=\"CDF\") \n```", "```py\nn = len(weights_male)\nsample_sums_male = [dist_male.sample(n).sum() for i in range(1001)]\nn \n```", "```py\n73 \n```", "```py\n%%add_method_to Normal\n\ndef sum(self, n):\n    \"\"\"Return the distribution of the sum of n values.\"\"\"\n    return Normal(n * self.mu, n * self.sigma2) \n```", "```py\ndist_sums_male = dist_male.sum(n) \n```", "```py\ndist_sums_male.plot_cdf(**model_options)\nCdf.from_seq(sample_sums_male).plot(label=\"sample\")\n\ndecorate(xlabel=\"Total weights (g)\", ylabel=\"CDF\") \n```", "```py\n%%add_method_to Normal\n\ndef __mul__(self, factor):\n    \"\"\"Multiplies by a scalar.\"\"\"\n    return Normal(factor * self.mu, factor**2 * self.sigma2) \n```", "```py\n%%add_method_to Normal\n\ndef __truediv__(self, factor):\n    \"\"\"Divides by a scalar.\"\"\"\n    return self * (1 / factor) \n```", "```py\ndist_mean_male = dist_sums_male / n \n```", "```py\nsample_means_male = np.array(sample_sums_male) / n \n```", "```py\ndist_mean_male.plot_cdf(**model_options)\nCdf.from_seq(sample_means_male).plot(label=\"sample\")\n\ndecorate(xlabel=\"Average weight (g)\", ylabel=\"CDF\") \n```", "```py\nstandard_error = np.sqrt(dist_mean_male.sigma2)\nstandard_error \n```", "```py\nnp.float64(40.591222045992765) \n```", "```py\nstandard_error = weights_male.std() / np.sqrt(n)\nstandard_error \n```", "```py\nnp.float64(40.59122204599277) \n```", "```py\nn = len(weights_female)\ndist_mean_female = dist_female.sum(n) / n\ndist_mean_female \n```", "```py\nNormal(3368.835616438356, 994.0498530055667) \n```", "```py\n%%add_method_to Normal\n\ndef __sub__(self, other):\n    \"\"\"Compute the distribution of a difference.\"\"\"\n    return Normal(self.mu - other.mu, self.sigma2 + other.sigma2) \n```", "```py\ndist_diff_means = dist_mean_male - dist_mean_female\ndist_diff_means \n```", "```py\nNormal(674.6575342465753, 2641.697160192656) \n```", "```py\nsample_sums_female = [dist_female.sample(n).sum() for i in range(1001)]\nsample_means_female = np.array(sample_sums_female) / n\nsample_diff_means = sample_means_male - sample_means_female \n```", "```py\ndist_diff_means.plot_cdf(**model_options)\nCdf.from_seq(sample_diff_means).plot(label=\"sample\")\n\ndecorate(xlabel=\"Difference in average weight (g)\", ylabel=\"CDF\") \n```", "```py\n%%add_method_to Normal\n\ndef ppf(self, xs):\n    sigma = np.sqrt(self.sigma2)\n    return norm.ppf(xs, self.mu, sigma) \n```", "```py\nci90 = dist_diff_means.ppf([0.05, 0.95])\nci90 \n```", "```py\narray([590.1162635 , 759.19880499]) \n```", "```py\nnp.percentile(sample_diff_means, [5, 95]) \n```", "```py\narray([578.86837628, 759.86657441]) \n```", "```py\nlam = 1\ndf_sample_expo = pd.DataFrame()\nfor n in [1, 10, 100]:\n    df_sample_expo[n] = [np.sum(np.random.exponential(lam, n)) for _ in range(1001)] \n```", "```py\ndf_sample_expo.mean() \n```", "```py\n1        0.989885\n10       9.825744\n100    100.022555\ndtype: float64 \n```", "```py\ndef  normal_plot_samples(df_sample, ylabel=\"\"):\n  \"\"\"Normal probability plots for samples of sums.\"\"\"\n    plt.figure(figsize=(6.8, 2.6))\n    for i, n in enumerate(df_sample):\n        plt.subplot(1, 3, i + 1)\n        normal_probability_plot(df_sample[n])\n        decorate(\n            title=\"n=%d\" % n,\n            xticks=[],\n            yticks=[],\n            xlabel=\"Standard normal\",\n            ylabel=ylabel,\n        ) \n```", "```py\nnormal_plot_samples(df_sample_expo, ylabel=\"Sum of exponential values\") \n```", "```py\nmu, sigma = 3.0, 1.0\ndf_sample_lognormal = pd.DataFrame()\nfor n in [1, 10, 100]:\n    df_sample_lognormal[n] = [\n        np.sum(np.random.lognormal(mu, sigma, n)) for _ in range(1001)\n    ] \n```", "```py\nnormal_plot_samples(df_sample_lognormal, ylabel=\"Sum of lognormal values\") \n```", "```py\nalpha = 1.0\ndf_sample = pd.DataFrame()\nfor n in [1, 10, 100]:\n    df_sample[n] = [np.sum(np.random.pareto(alpha, n)) for _ in range(1001)] \n```", "```py\nnormal_plot_samples(df_sample, ylabel=\"Sum of Pareto values\") \n```", "```py\ndef  generate_normal_correlated(n, rho):\n  \"\"\"Generates an array of correlated values from a standard normal dist.\"\"\"\n    xs = np.empty(n)\n    xs[0] = np.random.normal(0, 1)\n\n    sigma = np.sqrt(1 - rho**2)\n    for i in range(1, n):\n        xs[i] = rho * xs[i - 1] + np.random.normal(0, sigma)\n\n    return xs \n```", "```py\nfrom  scipy.stats  import expon\n\ndef  generate_expo_correlated(n, rho):\n  \"\"\"Generates a sequence of correlated values from an exponential dist.\"\"\"\n    normal = generate_normal_correlated(n, rho)\n    uniform = norm.cdf(normal)\n    expo = expon.ppf(uniform)\n    return expo \n```", "```py\nrho = 0.8\ndf_sample = pd.DataFrame()\nfor n in [1, 10, 100]:\n    df_sample[n] = [np.sum(generate_expo_correlated(n, rho)) for _ in range(1001)] \n```", "```py\nnormal_plot_samples(df_sample, ylabel=\"Sum of correlated values\") \n```", "```py\ndownload(\"https://github.com/AllenDowney/ThinkStats/raw/v3/nb/nsfg.py\")\ndownload(\"https://github.com/AllenDowney/ThinkStats/raw/v3/data/2002FemPreg.dct\")\ndownload(\"https://github.com/AllenDowney/ThinkStats/raw/v3/data/2002FemPreg.dat.gz\") \n```", "```py\nfrom  nsfg  import get_nsfg_groups\n\nlive, firsts, others = get_nsfg_groups() \n```", "```py\ndelta = firsts[\"prglngth\"].mean() - others[\"prglngth\"].mean()\ndelta \n```", "```py\nnp.float64(0.07803726677754952) \n```", "```py\nall_lengths = live[\"prglngth\"]\nm, s2 = all_lengths.mean(), all_lengths.var() \n```", "```py\ndef  sampling_dist_mean(data, n):\n    mean, var = data.mean(), data.var()\n    dist = Normal(mean, var)\n    return dist.sum(n) / n \n```", "```py\nn1 = firsts[\"totalwgt_lb\"].count()\ndist_firsts = sampling_dist_mean(all_lengths, n1)\nn1 \n```", "```py\nnp.int64(4363) \n```", "```py\nn2 = others[\"totalwgt_lb\"].count()\ndist_others = sampling_dist_mean(all_lengths, n2)\nn2 \n```", "```py\nnp.int64(4675) \n```", "```py\ndist_diff = dist_firsts - dist_others\ndist_diff \n```", "```py\nNormal(0.0, 0.003235837567930557) \n```", "```py\nsample_firsts = [np.random.choice(all_lengths, n1).mean() for i in range(1001)]\nsample_others = [np.random.choice(all_lengths, n2).mean() for i in range(1001)]\nsample_diffs = np.subtract(sample_firsts, sample_others) \n```", "```py\ndist_diff.plot_cdf(**model_options)\nCdf.from_seq(sample_diffs).plot(label=\"sample\")\nplt.axvline(delta, ls=\":\")\nplt.axvline(-delta, ls=\":\")\n\ndecorate(xlabel=\"Difference in pregnancy length\", ylabel=\"CDF\") \n```", "```py\n%%add_method_to Normal\n\ndef cdf(self, xs):\n    sigma = np.sqrt(self.sigma2)\n    return norm.cdf(xs, self.mu, sigma) \n```", "```py\nright = 1 - dist_diff.cdf(delta)\nright \n```", "```py\nnp.float64(0.08505405315526993) \n```", "```py\nleft = dist_diff.cdf(-delta)\nleft \n```", "```py\nnp.float64(0.08505405315526993) \n```", "```py\nleft + right \n```", "```py\nnp.float64(0.17010810631053985) \n```", "```py\nfrom  scipy.stats  import ttest_ind\n\nresult = ttest_ind(firsts[\"prglngth\"], others[\"prglngth\"])\nresult.pvalue \n```", "```py\nnp.float64(0.16755412639415004) \n```", "```py\ndef  transform_correlation(r, n):\n    return r * np.sqrt((n - 2) / (1 - r**2)) \n```", "```py\ndef  generate_data(n):\n  \"\"\"Uncorrelated sequences from a standard normal.\"\"\"\n    xs = np.random.normal(0, 1, n)\n    ys = np.random.normal(0, 1, n)\n    return xs, ys \n```", "```py\ndef  correlation(data):\n    xs, ys = data\n    return np.corrcoef(xs, ys)[0, 1] \n```", "```py\nn = 100\nrs = [correlation(generate_data(n)) for i in range(1001)] \n```", "```py\nts = transform_correlation(np.array(rs), n) \n```", "```py\nfrom  scipy.stats  import t as student_t\n\ndef  make_student_cdf(df):\n  \"\"\"Computes the CDF of a Student t distribution.\"\"\"\n    ts = np.linspace(-3, 3, 101)\n    ps = student_t.cdf(ts, df=df)\n    return Cdf(ps, ts) \n```", "```py\nmake_student_cdf(df=n - 2).plot(**model_options)\n\ncdf_ts = Cdf.from_seq(ts)\ncdf_ts.plot(label=\"random normals\")\n\ndecorate(xlabel=\"Transformed correlation\", ylabel=\"CDF\") \n```", "```py\nvalid = live.dropna(subset=[\"agepreg\", \"totalwgt_lb\"])\nn = len(valid)\nn \n```", "```py\n9038 \n```", "```py\ndata = valid[\"agepreg\"].values, valid[\"totalwgt_lb\"].values\nr_actual = correlation(data)\nr_actual \n```", "```py\nnp.float64(0.0688339703541091) \n```", "```py\ndef  permute(data):\n  \"\"\"Shuffle the x values.\"\"\"\n    xs, ys = data\n    new_xs = xs.copy()\n    np.random.shuffle(new_xs)\n    return new_xs, ys \n```", "```py\npermuted_corrs = [correlation(permute(data)) for i in range(1001)] \n```", "```py\nts = transform_correlation(np.array(permuted_corrs), n) \n```", "```py\nmake_student_cdf(n - 2).plot(**model_options)\nCdf.from_seq(ts).plot(label=\"permuted data\")\n\ndecorate(xlabel=\"Transformed correlation\", ylabel=\"CDF\") \n```", "```py\nt_actual = transform_correlation(r_actual, n) \n```", "```py\nright = 1 - student_t.cdf(t_actual, df=n - 2)\nright \n```", "```py\nnp.float64(2.861466619208386e-11) \n```", "```py\nleft = student_t.cdf(-t_actual, df=n - 2)\nleft \n```", "```py\nnp.float64(2.8614735536574016e-11) \n```", "```py\nleft + right \n```", "```py\nnp.float64(5.722940172865787e-11) \n```", "```py\nfrom  scipy.stats  import pearsonr\n\ncorr, p_value = pearsonr(*data)\np_value \n```", "```py\nnp.float64(5.7229471073151754e-11) \n```", "```py\nfrom  empiricaldist  import Hist\n\nqs = np.arange(1, 7)\nfreqs = [8, 9, 19, 5, 8, 11]\nobserved = Hist(freqs, qs)\nobserved.index.name = \"outcome\"\nobserved \n```", "```py\nnum_rolls = observed.sum()\noutcomes = observed.qs\nexpected = Hist(num_rolls / 6, outcomes) \n```", "```py\ndef  chi_squared_stat(observed, expected):\n    diffs = (observed - expected) ** 2\n    ratios = diffs / expected\n    return np.sum(ratios.values.flatten()) \n```", "```py\nobserved_chi2 = chi_squared_stat(observed, expected) \n```", "```py\ndef  simulate_dice(observed):\n    n = np.sum(observed)\n    rolls = np.random.choice(observed.qs, n, replace=True)\n    hist = Hist.from_seq(rolls)\n    return hist \n```", "```py\nsimulated_chi_squared = [\n    chi_squared_stat(simulate_dice(observed), expected) for i in range(1001)\n]\ncdf_simulated = Cdf.from_seq(simulated_chi_squared) \n```", "```py\nfrom  scipy.stats  import chi2 as chi2_dist\n\ndef  chi_squared_cdf(df):\n  \"\"\"Discrete approximation of the chi-squared CDF.\"\"\"\n    xs = np.linspace(0, 21, 101)\n    ps = chi2_dist.cdf(xs, df=df)\n    return Cdf(ps, xs) \n```", "```py\nn = len(observed)\ncdf_model = chi_squared_cdf(df=n - 1) \n```", "```py\ncdf_model.plot(**model_options)\ncdf_simulated.plot(label=\"simulation\")\n\ndecorate(xlabel=\"Chi-squared statistic\", ylabel=\"CDF\") \n```", "```py\np_value = 1 - chi2_dist.cdf(observed_chi2, df=n - 1)\np_value \n```", "```py\nnp.float64(0.04069938850404997) \n```", "```py\nfrom  scipy.stats  import chisquare\n\nchi2_stat, p_value = chisquare(f_obs=observed, f_exp=expected) \n```", "```py\np_value \n```", "```py\nnp.float64(0.040699388504049985) \n```", "```py\ngrouped = adelie.groupby(\"Sex\")\n\nlengths_male = grouped.get_group(\"MALE\")[\"Flipper Length (mm)\"]\nlengths_female = grouped.get_group(\"FEMALE\")[\"Flipper Length (mm)\"]\nobserved_diff = lengths_male.mean() - lengths_female.mean()\nobserved_diff \n```", "```py\nnp.float64(4.616438356164366) \n```", "```py\nvalid = live.dropna(subset=[\"hpagelb\", \"totalwgt_lb\"])\nn = len(valid)\nn \n```", "```py\n8933 \n```", "```py\ndata = valid[\"hpagelb\"].values, valid[\"totalwgt_lb\"].values\nr_actual = correlation(data)\nr_actual \n```", "```py\nnp.float64(0.06468629895432174) \n```", "```py\nmale = live.query(\"babysex == 1\")\nfemale = live.query(\"babysex == 2\") \n```", "```py\n1  married\n2  widowed\n3  divorces\n4  separated\n5  never married \n```", "```py\nobserved = pd.DataFrame()\nobserved[\"male\"] = male[\"fmarital\"].value_counts().sort_index()\nobserved[\"female\"] = female[\"fmarital\"].value_counts().sort_index()\nobserved \n```", "```py\nfrom  empiricaldist  import Pmf\n\npmf_fmarital = Pmf.from_seq(live[\"fmarital\"])\npmf_fmarital \n```", "```py\nexpected = pd.DataFrame()\nexpected[\"male\"] = pmf_fmarital * observed[\"male\"].sum()\nexpected[\"female\"] = pmf_fmarital * observed[\"female\"].sum()\nexpected \n```"]