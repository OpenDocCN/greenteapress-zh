- en: Distributions
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 原文：[https://allendowney.github.io/ThinkStats/chap02.html](https://allendowney.github.io/ThinkStats/chap02.html)
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: This chapter introduces one of the most fundamental ideas in statistics, the
    distribution. We’ll start with frequency tables – which represent the values in
    a dataset and the number of times each of them appears – and use them to explore
    data from the National Survey of Family Growth (NSFG). We’ll also look for extreme
    or erroneous values, called outliers, and consider ways to handle them.
  prefs: []
  type: TYPE_NORMAL
- en: '[Click here to run this notebook on Colab](https://colab.research.google.com/github/AllenDowney/ThinkStats/blob/v3/nb/chap02.ipynb).'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: Frequency Tables
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: One way to describe a variable is a **frequency table**, which contains the
    values of the variable and their **frequencies** – that is, the number of times
    each value appears. This description is called the **distribution** of the variable.
  prefs: []
  type: TYPE_NORMAL
- en: To represent distributions, we’ll use a library called `empiricaldist`. In this
    context, “empirical” means that the distributions are based on data rather than
    mathematical models. `empiricaldist` provides a class called `FreqTab` that we
    can use to compute and plot frequency tables. We can import it like this.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: To show how it works, we’ll start with a small list of values.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: '`FreqTab` provides a method called `from_seq` that takes a sequence and makes
    a `FreqTab` object.'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: '|  | freqs |'
  prefs: []
  type: TYPE_TB
- en: '| --- | --- |'
  prefs: []
  type: TYPE_TB
- en: '| 1.0 | 1 |'
  prefs: []
  type: TYPE_TB
- en: '| 2.0 | 2 |'
  prefs: []
  type: TYPE_TB
- en: '| 3.0 | 1 |'
  prefs: []
  type: TYPE_TB
- en: '| 5.0 | 1 |'
  prefs: []
  type: TYPE_TB
- en: A `FreqTab` object is a kind of Pandas `Series` that contains values and their
    frequencies. In this example, the value `1.0` corresponds to frequency 1, the
    value `2.0` corresponds to frequency 2, etc.
  prefs: []
  type: TYPE_NORMAL
- en: '`FreqTab` provides a method called `bar` that plots the frequency table as
    a bar chart.'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: '![_images/38cccabec368062f7c957bc062b975b2eb398c88981d728edffb6662929d05a0.png](../Images/6e86a5cad8ecb7e5dd373af698659658.png)'
  prefs: []
  type: TYPE_IMG
- en: Because a `FreqTab` is a Pandas `Series`, we can use the bracket operator to
    look up a value and get its frequency.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
- en: But unlike a Pandas `Series`, we can also call a `FreqTab` object like a function
    to look up a value.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE10]'
  prefs: []
  type: TYPE_PRE
- en: If we look up a value that does not appear in the `FreqTab`, the function syntax
    returns `0`.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE11]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE12]'
  prefs: []
  type: TYPE_PRE
- en: A `FreqTab` object has an attribute called `qs` that returns an array of values
    – `qs` stands for quantities, although technically not all values are quantities.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE13]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE14]'
  prefs: []
  type: TYPE_PRE
- en: '`FreqTab` also has an attribute called `fs` that returns an array of frequencies.'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE15]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE16]'
  prefs: []
  type: TYPE_PRE
- en: '`FreqTab` provides an `items` method we can use to loop through quantity-frequency
    pairs:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE17]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE18]'
  prefs: []
  type: TYPE_PRE
- en: We’ll see more `FreqTab` methods as we go along.
  prefs: []
  type: TYPE_NORMAL
- en: NSFG Distributions
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: When you start working with a new dataset, I suggest you explore the variables
    you are planning to use one at a time, and a good way to start is by looking at
    frequency tables.
  prefs: []
  type: TYPE_NORMAL
- en: As an example, let’s look at data from the National Survey of Family Growth
    (NSFG). In the previous chapter, we downloaded this dataset, read it into a Pandas
    `DataFrame`, and cleaned a few of the variables. The code we used to load and
    clean the data is in a module called `nsfg.py` – instructions for installing this
    module are in the notebook for this chapter.
  prefs: []
  type: TYPE_NORMAL
- en: The following cells download the data files and install `statadict`, which we
    need to read the data.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE19]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE20]'
  prefs: []
  type: TYPE_PRE
- en: We can import it and read the pregnancy file like this.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE21]'
  prefs: []
  type: TYPE_PRE
- en: For the examples in this chapter, we’ll focus on pregnancies that ended in live
    birth. We can use the `query` method to select the rows where `outcome` is 1.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE22]'
  prefs: []
  type: TYPE_PRE
- en: In the string that’s passed to `query`, variable names like `outcome` refer
    to column names in the `DataFrame`. This string can also contain operators like
    `==` and operands like `1`.
  prefs: []
  type: TYPE_NORMAL
- en: Now we can use `FreqTab.from_seq` to count the number of times each quantity
    appears in `birthwgt_lb`, which is the pounds part of the birth weights. The `name`
    argument gives the `FreqTab` object a name, which is used as a label when we plot
    it.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE23]'
  prefs: []
  type: TYPE_PRE
- en: Here’s what the distribution looks like.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE24]'
  prefs: []
  type: TYPE_PRE
- en: '![_images/1225faefc9cc328f587038caa330467083abbfad0df65fe7ac30c19f7de66934.png](../Images/51dd09f443e83d16ae8fb1de2f546454.png)'
  prefs: []
  type: TYPE_IMG
- en: Looking at a distribution like this, the first thing we notice is the shape,
    which resembles the famous bell curve, more formally called a normal distribution
    or a Gaussian distribution. The other notable feature of the distribution is the
    **mode**, which is the most common value. To find the mode, we can use the method
    `idxmax`, which finds the quantity associated with the highest frequency.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE25]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE26]'
  prefs: []
  type: TYPE_PRE
- en: '`FreqTab` provides a method called `mode` that does the same thing.'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE27]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE28]'
  prefs: []
  type: TYPE_PRE
- en: In this distribution, the mode is at 7 pounds.
  prefs: []
  type: TYPE_NORMAL
- en: As another example, here’s the frequency table of `birthwgt_oz`, which is the
    ounces part of birth weight.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE29]'
  prefs: []
  type: TYPE_PRE
- en: '![_images/295e6c3c74a56a495b3c3b3770e02da72343f26ab49b06bd530b1b5532aa5951.png](../Images/329a8a4835761f7cb900543243060a13.png)'
  prefs: []
  type: TYPE_IMG
- en: Because nature doesn’t know about pounds and ounces, we might expect all values
    of `birthwgt_oz` to be equally likely – that is, this distribution should be **uniform**.
    But it looks like `0` is more common than the other quantities, and `1` and `15`
    are less common, which suggests that respondents round off birth weights that
    are close to a whole number of pounds.
  prefs: []
  type: TYPE_NORMAL
- en: As another example, let’s look at the frequency table of `agepreg`, which is
    the mother’s age at the end of pregnancy.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE30]'
  prefs: []
  type: TYPE_PRE
- en: In the NSFG, age is recorded in years and months, so there are more unique values
    than in the other distributions we’ve looked at. For that reason, we’ll pass `width=0.1`
    as a keyword argument to the `bar` method, which adjusts the width of the bars
    so they don’t overlap too much.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE31]'
  prefs: []
  type: TYPE_PRE
- en: '![_images/d36be578217dbc1d4ccb1b37fe09e25271eaad1f93339057d94107d4f917c49e.png](../Images/0aad170a0a4bf796f83f5b54eae38ea5.png)'
  prefs: []
  type: TYPE_IMG
- en: The distribution is very roughly bell-shaped, but it is **skewed** to the right
    – that is, the tail extends farther right than left.
  prefs: []
  type: TYPE_NORMAL
- en: Finally, let’s look at the frequency table of `prglngth`, which is the length
    of the pregnancy in weeks. The `xlim` argument sets the limit of the x-axis to
    the range from 20 to 50 weeks – there are not many values outside this range,
    and they are probably errors.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE32]'
  prefs: []
  type: TYPE_PRE
- en: '![_images/2b603baf7dd3e5c07f5a1eb73351efd3a220a91e2635cc45a7a3fc31ca327ab1.png](../Images/95b0bb97217f464836f1c3312dafa36e.png)'
  prefs: []
  type: TYPE_IMG
- en: By far the most common quantity is 39 weeks. The left tail is longer than the
    right – early babies are common, but pregnancies seldom go past 43 weeks, and
    doctors often intervene if they do.
  prefs: []
  type: TYPE_NORMAL
- en: Outliers
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Looking at frequency tables, it is easy to identify the shape of the distribution
    and the most common quantities, but rare quantities are not always visible. Before
    going on, it is a good idea to check for **outliers**, which are extreme values
    that might be measurement or recording errors, or might be accurate reports of
    rare events.
  prefs: []
  type: TYPE_NORMAL
- en: To identify outliers, the following function takes a `FreqTab` object and an
    integer `n`, and uses a slice index to select the `n` smallest quantities and
    their frequencies.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE33]'
  prefs: []
  type: TYPE_PRE
- en: In the frequency table of `prglngth`, here are the 10 smallest values.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE34]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE35]'
  prefs: []
  type: TYPE_PRE
- en: Since we selected the rows for live births, pregnancy lengths less than 10 weeks
    are certainly errors. The most likely explanation is that the outcome was not
    coded correctly. Lengths higher than 30 weeks are probably legitimate. Between
    10 and 30 weeks, it is hard to be sure – some quantities are probably errors,
    but some are correctly recorded preterm births.
  prefs: []
  type: TYPE_NORMAL
- en: The following function selects the largest values from a `FreqTab` object.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE36]'
  prefs: []
  type: TYPE_PRE
- en: Here are the longest pregnancy lengths in the dataset.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE37]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE38]'
  prefs: []
  type: TYPE_PRE
- en: Again, some of these values are probably errors. Most doctors recommend induced
    labor if a pregnancy exceeds 41 weeks, so 50 weeks seems unlikely to be correct.
    But there is no clear line between values that are certainly errors and values
    that might be correct reports of rare events.
  prefs: []
  type: TYPE_NORMAL
- en: The best way to handle outliers depends on “domain knowledge” – that is, information
    about where the data come from and what they mean. And it depends on what analysis
    you are planning to perform.
  prefs: []
  type: TYPE_NORMAL
- en: In this example, the motivating question is whether first babies tend to be
    earlier or later than other babies. So we’ll use statistics that are not thrown
    off too much by a small number of incorrect values.
  prefs: []
  type: TYPE_NORMAL
- en: First Babies
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Now let’s compare the distribution of pregnancy lengths for first babies and
    others. We can use the `query` method to select rows that represent first babies
    and others.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE39]'
  prefs: []
  type: TYPE_PRE
- en: And make a `FreqTab` of pregnancy lengths for each group.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE40]'
  prefs: []
  type: TYPE_PRE
- en: The following function plots two frequency tables side-by-side.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE41]'
  prefs: []
  type: TYPE_PRE
- en: Here’s what they look like.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE42]'
  prefs: []
  type: TYPE_PRE
- en: '![_images/7476e6cd1892ee8b93ce13c513e3c5558cb2e14dd985a3621e7ec9166262e9dd.png](../Images/efdd4881c7aefd92f8af65c005324617.png)'
  prefs: []
  type: TYPE_IMG
- en: There is no obvious difference in the shape of the distributions or in the outliers.
    It looks like more of the non-first babies are born during week 39, but there
    are more non-first babies in the dataset, so we should not compare the counts
    directly.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE43]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE44]'
  prefs: []
  type: TYPE_PRE
- en: Comparing the means of the distributions, it looks like first babies are a little
    bit later on average.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE45]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE46]'
  prefs: []
  type: TYPE_PRE
- en: But the difference is only 0.078 weeks, which is about 13 hours.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE47]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE48]'
  prefs: []
  type: TYPE_PRE
- en: 'There are several possible causes of this apparent difference:'
  prefs: []
  type: TYPE_NORMAL
- en: There might be an actual difference in average pregnancy length between first
    babies and others.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The apparent difference we see in this dataset might be the result of bias in
    the sampling process – that is, the selection of survey respondents.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The apparent difference might be the result of measurement error – for example,
    the self-reported pregnancy lengths might be more accurate for first babies or
    others.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The apparent difference might be the result of random variation in the sampling
    process.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'In later chapters, we will consider these possible explanations more carefully,
    but for now we will take this result at face value: in this dataset, there is
    a small difference in pregnancy length between these groups.'
  prefs: []
  type: TYPE_NORMAL
- en: Effect Size
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: A difference like this is sometimes called an “effect”. There are several ways
    to quantify the magnitude of an effect. The simplest is to report the difference
    in absolute terms – in this example, the difference is 0.078 weeks.
  prefs: []
  type: TYPE_NORMAL
- en: Another is to report the difference in relative terms. For example, we might
    say that first pregnancies are 0.2% longer than others, on average.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE49]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE50]'
  prefs: []
  type: TYPE_PRE
- en: Another option is to report a **standardized** effect size, which is a statistic
    intended to quantify the size of an effect in a way that is comparable between
    different quantities and different groups.
  prefs: []
  type: TYPE_NORMAL
- en: Standardizing means we express the difference as a multiple of the standard
    deviation. So we might be tempted to write something like this.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE51]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE52]'
  prefs: []
  type: TYPE_PRE
- en: But notice that we used both groups to compute the standard deviation. If the
    groups are substantially different, the standard deviation when we put them together
    is larger than in either group, which might make the effect size seem small.
  prefs: []
  type: TYPE_NORMAL
- en: An alternative is to use the standard deviation of just one group, but it’s
    not clear which. So we could take the average of the two standard deviations,
    but if the groups are different sizes, that would give too much weight to one
    group and not enough to the other.
  prefs: []
  type: TYPE_NORMAL
- en: A common solution is to use **pooled standard deviation**, which is the square
    root of pooled variance, which is the weighted sum of the variances in the groups.
    To compute it, we’ll start with the variances.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE53]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE54]'
  prefs: []
  type: TYPE_PRE
- en: Here is the weighted sum, with the group sizes as weights.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE55]'
  prefs: []
  type: TYPE_PRE
- en: Finally, here is the pooled standard deviation.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE56]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE57]'
  prefs: []
  type: TYPE_PRE
- en: The pooled standard deviation is between the standard deviations of the groups.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE58]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE59]'
  prefs: []
  type: TYPE_PRE
- en: A standardized effect size that uses pooled standard deviation is called **Cohen’s
    effect size**. Here’s a function that computes it.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE60]'
  prefs: []
  type: TYPE_PRE
- en: And here’s the effect size for the difference in mean pregnancy lengths.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE61]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE62]'
  prefs: []
  type: TYPE_PRE
- en: In this example, the difference is 0.029 standard deviations, which is small.
    To put that in perspective, the difference in height between men and women is
    about 1.7 standard deviations.
  prefs: []
  type: TYPE_NORMAL
- en: Reporting results
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: We have seen several ways to describe the difference in pregnancy length (if
    there is one) between first babies and others. How should we report these results?
  prefs: []
  type: TYPE_NORMAL
- en: The answer depends on who is asking the question. A scientist might be interested
    in any (real) effect, no matter how small. A doctor might only care about effects
    that are **practically significant** – that is, differences that matter in practice.
    A pregnant woman might be interested in results that are relevant to her, like
    the probability of delivering early or late.
  prefs: []
  type: TYPE_NORMAL
- en: How you report results also depends on your goals. If you are trying to demonstrate
    the importance of an effect, you might choose summary statistics that emphasize
    differences. If you are trying to reassure a patient, you might choose statistics
    that put the differences in context.
  prefs: []
  type: TYPE_NORMAL
- en: Of course your decisions should also be guided by professional ethics. It’s
    OK to be persuasive – you *should* design statistical reports and visualizations
    that tell a story clearly. But you should also do your best to make your reports
    honest, and to acknowledge uncertainty and limitations.
  prefs: []
  type: TYPE_NORMAL
- en: Glossary
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '**distribution**: The set of values and how frequently each value appears in
    a dataset.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**frequency table**: A mapping from values to frequencies.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**frequency**: The number of times a value appears in a sample.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**skewed:** A distribution is skewed if it is asymmetrical, with extreme quantities
    extending farther in one direction than the other.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**mode**: The most frequent quantity in a sample, or one of the most frequent
    quantities.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**uniform distribution**: A distribution in which all quantities have the same
    frequency.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**outlier**: An extreme quantity in a distribution.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**standardized:** A statistic is standardized if it is expressed in terms that
    are comparable across different datasets and domains.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**pooled standard deviation:** A statistic that combines data from two or more
    groups to compute a common standard deviation.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Cohen’s effect size:** A standardized statistic that quantifies the difference
    in the means of two groups.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**practically significant:** An effect is practically significant if it is
    big enough to matter in practice.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Exercises
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: For the exercises in this chapter, we’ll load the NSFG female respondent file,
    which contains one row for each female respondent. Instructions for downloading
    the data and the codebook are in the notebook for this chapter.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE63]'
  prefs: []
  type: TYPE_PRE
- en: The codebook for the female respondent file is at [https://ftp.cdc.gov/pub/Health_Statistics/NCHS/Dataset_Documentation/NSFG/Cycle6Codebook-Female.pdf](https://ftp.cdc.gov/pub/Health_Statistics/NCHS/Dataset_Documentation/NSFG/Cycle6Codebook-Female.pdf).
  prefs: []
  type: TYPE_NORMAL
- en: The `nsfg.py` module provides a function that reads the female respondent file,
    cleans some of the variables, and returns a `DataFrame`.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE64]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE65]'
  prefs: []
  type: TYPE_PRE
- en: This `DataFrame` contains 3092 columns, but we’ll use just a few of them.
  prefs: []
  type: TYPE_NORMAL
- en: Exercise 2.1
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: We’ll start with `totincr`, which records the total income for the respondent’s
    family, encoded with a value from 1 to 14. You can read the codebook for the respondent
    file to see what income level each value represents.
  prefs: []
  type: TYPE_NORMAL
- en: Make a `FreqTab` object to represent the distribution of this variable and plot
    it as a bar chart.
  prefs: []
  type: TYPE_NORMAL
- en: Exercise 2.2
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Make a frequency table of the `parity` column, which records the number of children
    each respondent has borne. How would you describe the shape of this distribution?
  prefs: []
  type: TYPE_NORMAL
- en: Use the `largest` function to find the largest values of `parity`. Are there
    any values you think are errors?
  prefs: []
  type: TYPE_NORMAL
- en: Exercise 2.3
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Let’s investigate whether women with higher or lower income bear more children.
    Use the query method to select the respondents with the highest income (level
    14). Plot the frequency table of `parity` for just the high income respondents.
  prefs: []
  type: TYPE_NORMAL
- en: Compare the mean `parity` for high income respondents and others.
  prefs: []
  type: TYPE_NORMAL
- en: Compute Cohen’s effect size for this difference. How does it compare with the
    difference in pregnancy length for first babies and others?
  prefs: []
  type: TYPE_NORMAL
- en: Do these results show that people with higher income have fewer children, or
    can you think of another explanation for the apparent difference?
  prefs: []
  type: TYPE_NORMAL
- en: '[Think Stats: Exploratory Data Analysis in Python, 3rd Edition](https://allendowney.github.io/ThinkStats/index.html)'
  prefs: []
  type: TYPE_NORMAL
- en: Copyright 2024 [Allen B. Downey](https://allendowney.com)
  prefs: []
  type: TYPE_NORMAL
- en: 'Code license: [MIT License](https://mit-license.org/)'
  prefs: []
  type: TYPE_NORMAL
- en: 'Text license: [Creative Commons Attribution-NonCommercial-ShareAlike 4.0 International](https://creativecommons.org/licenses/by-nc-sa/4.0/)'
  prefs: []
  type: TYPE_NORMAL
