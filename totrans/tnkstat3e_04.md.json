["```py\nfrom  os.path  import basename, exists\n\ndef  download(url):\n    filename = basename(url)\n    if not exists(filename):\n        from  urllib.request  import urlretrieve\n\n        local, _ = urlretrieve(url, filename)\n        print(\"Downloaded \" + local)\n\ndownload(\"https://github.com/AllenDowney/ThinkStats/raw/v3/nb/thinkstats.py\") \n```", "```py\ntry:\n    import  empiricaldist\nexcept ImportError:\n    %pip install empiricaldist \n```", "```py\nimport  numpy  as  np\nimport  matplotlib.pyplot  as  plt\nfrom  thinkstats  import decorate \n```", "```py\nfrom  empiricaldist  import FreqTab \n```", "```py\nt = [1.0, 2.0, 2.0, 3.0, 5.0] \n```", "```py\nftab = FreqTab.from_seq(t)\nftab \n```", "```py\nftab.bar()\ndecorate(xlabel=\"Value\", ylabel=\"Frequency\") \n```", "```py\nftab[2.0] \n```", "```py\nnp.int64(2) \n```", "```py\nftab(2.0) \n```", "```py\nnp.int64(2) \n```", "```py\nftab(4.0) \n```", "```py\n0 \n```", "```py\nftab.qs \n```", "```py\narray([1., 2., 3., 5.]) \n```", "```py\nftab.fs \n```", "```py\narray([1, 2, 1, 1]) \n```", "```py\nfor x, freq in ftab.items():\n    print(x, freq) \n```", "```py\n1.0 1\n2.0 2\n3.0 1\n5.0 1 \n```", "```py\ntry:\n    import  statadict\nexcept ImportError:\n    %pip install statadict \n```", "```py\ndownload(\"https://github.com/AllenDowney/ThinkStats/raw/v3/nb/nsfg.py\")\ndownload(\"https://github.com/AllenDowney/ThinkStats/raw/v3/data/2002FemPreg.dct\")\ndownload(\"https://github.com/AllenDowney/ThinkStats/raw/v3/data/2002FemPreg.dat.gz\") \n```", "```py\nfrom  nsfg  import read_fem_preg\n\npreg = read_fem_preg() \n```", "```py\nlive = preg.query(\"outcome == 1\") \n```", "```py\nftab_lb = FreqTab.from_seq(live[\"birthwgt_lb\"], name=\"birthwgt_lb\") \n```", "```py\nftab_lb.bar()\ndecorate(xlabel=\"Pounds\", ylabel=\"Frequency\") \n```", "```py\nftab_lb.idxmax() \n```", "```py\nnp.float64(7.0) \n```", "```py\nftab_lb.mode() \n```", "```py\nnp.float64(7.0) \n```", "```py\nftab_oz = FreqTab.from_seq(live[\"birthwgt_oz\"], name=\"birthwgt_oz\")\nftab_oz.bar()\ndecorate(xlabel=\"Ounces\", ylabel=\"Frequency\") \n```", "```py\nftab_age = FreqTab.from_seq(live[\"agepreg\"], name=\"agepreg\") \n```", "```py\nftab_age.bar(width=0.1)\ndecorate(xlabel=\"Age\", ylabel=\"Frequency\") \n```", "```py\nftab_length = FreqTab.from_seq(live[\"prglngth\"], name=\"prglngth\")\nftab_length.bar()\ndecorate(xlabel=\"Weeks\", ylabel=\"Frequency\", xlim=[20, 50]) \n```", "```py\ndef  smallest(ftab, n=10):\n    return ftab[:n] \n```", "```py\nsmallest(ftab_length) \n```", "```py\nprglngth\n0     1\n4     1\n9     1\n13    1\n17    2\n18    1\n19    1\n20    1\n21    2\n22    7\nName: prglngth, dtype: int64 \n```", "```py\ndef  largest(ftab, n=10):\n    return ftab[-n:] \n```", "```py\nlargest(ftab_length) \n```", "```py\nprglngth\n40    1116\n41     587\n42     328\n43     148\n44      46\n45      10\n46       1\n47       1\n48       7\n50       2\nName: prglngth, dtype: int64 \n```", "```py\nfirsts = live.query(\"birthord == 1\")\nothers = live.query(\"birthord != 1\") \n```", "```py\nftab_first = FreqTab.from_seq(firsts[\"prglngth\"], name=\"firsts\")\nftab_other = FreqTab.from_seq(others[\"prglngth\"], name=\"others\") \n```", "```py\ndef  two_bar_plots(ftab1, ftab2, width=0.45):\n    ftab1.bar(align=\"edge\", width=-width)\n    ftab2.bar(align=\"edge\", width=width, alpha=0.5) \n```", "```py\ntwo_bar_plots(ftab_first, ftab_other)\ndecorate(xlabel=\"Weeks\", ylabel=\"Frequency\", xlim=[20, 50]) \n```", "```py\nfirsts[\"prglngth\"].count(), others[\"prglngth\"].count() \n```", "```py\n(np.int64(4413), np.int64(4735)) \n```", "```py\nfirst_mean = firsts[\"prglngth\"].mean()\nother_mean = others[\"prglngth\"].mean()\nfirst_mean, other_mean \n```", "```py\n(np.float64(38.60095173351461), np.float64(38.52291446673706)) \n```", "```py\ndiff = first_mean - other_mean\ndiff, diff * 7 * 24 \n```", "```py\n(np.float64(0.07803726677754952), np.float64(13.11026081862832)) \n```", "```py\ndiff / live[\"prglngth\"].mean() * 100 \n```", "```py\nnp.float64(0.20237586646738304) \n```", "```py\ndiff / live[\"prglngth\"].std() \n```", "```py\nnp.float64(0.028877623375210403) \n```", "```py\ngroup1, group2 = firsts[\"prglngth\"], others[\"prglngth\"] \n```", "```py\nv1, v2 = group1.var(), group2.var() \n```", "```py\nn1, n2 = group1.count(), group2.count()\npooled_var = (n1 * v1 + n2 * v2) / (n1 + n2) \n```", "```py\nnp.sqrt(pooled_var) \n```", "```py\nnp.float64(2.7022108144953862) \n```", "```py\nfirsts[\"prglngth\"].std(), others[\"prglngth\"].std() \n```", "```py\n(np.float64(2.7919014146687204), np.float64(2.6158523504392375)) \n```", "```py\ndef  cohen_effect_size(group1, group2):\n    diff = group1.mean() - group2.mean()\n\n    v1, v2 = group1.var(), group2.var()\n    n1, n2 = group1.count(), group2.count()\n    pooled_var = (n1 * v1 + n2 * v2) / (n1 + n2)\n\n    return diff / np.sqrt(pooled_var) \n```", "```py\ncohen_effect_size(firsts[\"prglngth\"], others[\"prglngth\"]) \n```", "```py\nnp.float64(0.028879044654449834) \n```", "```py\ndownload(\"https://github.com/AllenDowney/ThinkStats/raw/v3/data/2002FemResp.dct\")\ndownload(\"https://github.com/AllenDowney/ThinkStats/raw/v3/data/2002FemResp.dat.gz\") \n```", "```py\nfrom  nsfg  import read_fem_resp\n\nresp = read_fem_resp()\nresp.shape \n```", "```py\n(7643, 3092) \n```"]