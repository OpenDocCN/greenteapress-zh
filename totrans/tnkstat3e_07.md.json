["```py\nfrom  os.path  import basename, exists\n\ndef  download(url):\n    filename = basename(url)\n    if not exists(filename):\n        from  urllib.request  import urlretrieve\n\n        local, _ = urlretrieve(url, filename)\n        print(\"Downloaded \" + local)\n\ndownload(\"https://github.com/AllenDowney/ThinkStats/raw/v3/nb/thinkstats.py\") \n```", "```py\ntry:\n    import  empiricaldist\nexcept ImportError:\n    %pip install empiricaldist \n```", "```py\nimport  numpy  as  np\nimport  pandas  as  pd\nimport  matplotlib.pyplot  as  plt\n\nfrom  thinkstats  import decorate \n```", "```py\ndef  flip(n, p):\n    choices = [1, 0]\n    probs = [p, 1 - p]\n    return np.random.choice(choices, n, p=probs) \n```", "```py\n# Seed the random number generator so we get the same results every time\nnp.random.seed(1) \n```", "```py\nflip(25, 0.9) \n```", "```py\narray([1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0,\n       1, 1, 1]) \n```", "```py\nfrom  empiricaldist  import Pmf\n\nseq = flip(1000, 0.9)\npmf = Pmf.from_seq(seq)\npmf \n```", "```py\ndef  simulate_round(n, p):\n    seq = flip(n, p)\n    return seq.sum() \n```", "```py\nn = 25\np = 0.9\nresults_sim = [simulate_round(n, p) for i in range(1000)] \n```", "```py\nnp.mean(results_sim), n * p \n```", "```py\n(np.float64(22.522), 22.5) \n```", "```py\nfrom  empiricaldist  import Pmf\n\npmf_sim = Pmf.from_seq(results_sim, name=\"simulation results\")\n\npmf_sim.bar()\ndecorate(xlabel=\"Hits\", ylabel=\"PMF\") \n```", "```py\nfrom  scipy.special  import comb\n\ndef  binomial_pmf(k, n, p):\n    return comb(n, k) * (p**k) * ((1 - p) ** (n - k)) \n```", "```py\nks = np.arange(16, n + 1)\nps = binomial_pmf(ks, n, p)\npmf_binom = Pmf(ps, ks, name=\"binomial model\") \n```", "```py\nfrom  thinkstats  import two_bar_plots\n\ntwo_bar_plots(pmf_sim, pmf_binom)\ndecorate(xlabel=\"Hits\", ylabel=\"PMF\") \n```", "```py\nfilename = \"Shooting_at_the_2020_Summer_Olympics_Mens_skeet\" \n```", "```py\ndownload(\"https://github.com/AllenDowney/ThinkStats/raw/v3/data/\" + filename) \n```", "```py\ntables = pd.read_html(filename)\ntable = tables[6]\ntable.head() \n```", "```py\ncolumns = [\"1\", \"2\", \"3\", \"4\", \"5\"]\nresults = table[columns].values.flatten() \n```", "```py\ntotal_shots = 25 * len(results)\ntotal_hits = results.sum()\nn, total_shots, total_hits \n```", "```py\n(25, 3750, np.int64(3575)) \n```", "```py\np = total_hits / total_shots\np \n```", "```py\nnp.float64(0.9533333333333334) \n```", "```py\nps = binomial_pmf(ks, n, p)\npmf_binom = Pmf(ps, ks, name=\"binomial model\") \n```", "```py\npmf_results = Pmf.from_seq(results, name=\"actual results\")\n\ntwo_bar_plots(pmf_results, pmf_binom)\ndecorate(xlabel=\"Hits\", ylabel=\"PMF\") \n```", "```py\nn = 3600\nm = 6\np = m / 3600\np \n```", "```py\n0.0016666666666666668 \n```", "```py\ndef  simulate_goals(n, p):\n    return flip(n, p).sum() \n```", "```py\ngoals = [simulate_goals(n, p) for i in range(1001)]\nnp.mean(goals) \n```", "```py\nnp.float64(6.021978021978022) \n```", "```py\nfrom  scipy.special  import factorial\n\ndef  poisson_pmf(k, lam):\n  \"\"\"Compute the Poisson PMF.\n\n k (int or array-like): The number of occurrences\n lam (float): The rate parameter (Î») of the Poisson distribution\n\n returns: float or ndarray\n \"\"\"\n    return (lam**k) * np.exp(-lam) / factorial(k) \n```", "```py\nlam = 6\nks = np.arange(20)\nps = poisson_pmf(ks, lam)\npmf_poisson = Pmf(ps, ks, name=\"Poisson model\") \n```", "```py\npmf_poisson.normalize()\npmf_poisson.mean() \n```", "```py\nnp.float64(5.999925498375129) \n```", "```py\npmf_sim = Pmf.from_seq(goals, name=\"simulation\")\n\ntwo_bar_plots(pmf_sim, pmf_poisson)\ndecorate(xlabel=\"Goals\", ylabel=\"PMF\") \n```", "```py\ndownload(\"https://github.com/AllenDowney/ThinkStats/raw/v3/data/nhl_2023_2024.hdf\") \n```", "```py\nfilename = \"nhl_2023_2024.hdf\"\n\nwith pd.HDFStore(filename, \"r\") as store:\n    keys = store.keys()\n\nlen(keys), keys[0] \n```", "```py\n(1312, '/202310100PIT') \n```", "```py\ntimes = pd.read_hdf(filename, key=keys[0])\ntimes \n```", "```py\n0     424\n1    1916\n2    2137\n3    3005\n4    3329\n5    3513\ndtype: int64 \n```", "```py\n3600 - times[5] \n```", "```py\nnp.int64(87) \n```", "```py\ngoals = []\n\nfor key in keys:\n    times = pd.read_hdf(filename, key=key)\n    n = len(times)\n    goals.append(n) \n```", "```py\nlam = np.mean(goals)\nlam \n```", "```py\nnp.float64(6.0182926829268295) \n```", "```py\nps = poisson_pmf(ks, lam)\npmf_poisson = Pmf(ps, ks, name=\"Poisson model\") \n```", "```py\npmf_goals = Pmf.from_seq(goals, name=\"goals scored\")\n\ntwo_bar_plots(pmf_goals, pmf_poisson)\ndecorate(xlabel=\"Goals\", ylabel=\"PMF\") \n```", "```py\nn = 3600\nm = 6\np = m / 3600\np \n```", "```py\n0.0016666666666666668 \n```", "```py\ndef  simulate_first_goal(n, p):\n    return flip(n, p).argmax() \n```", "```py\nnp.random.seed(3) \n```", "```py\nfirst_goal_times = [simulate_first_goal(n, p) for i in range(1001)]\nmean = np.mean(first_goal_times)\nmean \n```", "```py\nnp.float64(597.7902097902098) \n```", "```py\ndef  exponential_cdf(x, lam):\n  \"\"\"Compute the exponential CDF.\n\n x: float or sequence of floats\n lam: rate parameter\n\n returns: float or NumPy array of cumulative probability\n \"\"\"\n    return 1 - np.exp(-lam * x) \n```", "```py\nlam = 1 / mean\nlam \n```", "```py\nnp.float64(0.0016728276636563566) \n```", "```py\nfrom  empiricaldist  import Cdf\n\nts = np.linspace(0, 3600, 201)\nps = exponential_cdf(ts, lam)\ncdf_expo = Cdf(ps, ts, name=\"exponential model\") \n```", "```py\ncdf_sim = Cdf.from_seq(first_goal_times, name=\"simulation\")\n\ncdf_expo.plot(ls=\":\", color=\"gray\")\ncdf_sim.plot()\n\ndecorate(xlabel=\"Time of first goal (seconds)\", ylabel=\"CDF\") \n```", "```py\nfilename = \"nhl_2023_2024.hdf\"\n\nwith pd.HDFStore(filename, \"r\") as store:\n    keys = store.keys() \n```", "```py\nfirsts = []\n\nfor key in keys:\n    times = pd.read_hdf(filename, key=key)\n    if len(times) > 0:\n        firsts.append(times[0])\n    else:\n        firsts.append(np.nan) \n```", "```py\nlam = 1 / np.nanmean(firsts)\nlam \n```", "```py\nnp.float64(0.0015121567467720825) \n```", "```py\nps = exponential_cdf(ts, lam)\ncdf_expo = Cdf(ps, ts, name=\"exponential model\") \n```", "```py\ncdf_firsts = Cdf.from_seq(firsts, name=\"data\", dropna=False)\ncdf_firsts.tail() \n```", "```py\ncdf_expo.plot(ls=\":\", color=\"gray\")\ncdf_firsts.plot()\n\ndecorate(xlabel=\"Time of first goal (seconds)\", ylabel=\"CDF\") \n```", "```py\ndef  simulate_growth(n):\n    choices = [1, 2, 3]\n    gains = np.random.choice(choices, n)\n    return gains.sum() \n```", "```py\nsim_weights = [simulate_growth(100) for i in range(1001)]\nm, s = np.mean(sim_weights), np.std(sim_weights)\nm, s \n```", "```py\n(np.float64(199.37062937062936), np.float64(8.388630840376777)) \n```", "```py\nfrom  scipy.stats  import norm\n\ndef  make_normal_model(data):\n    m, s = np.mean(data), np.std(data)\n    low, high = m - 4 * s, m + 4 * s\n    qs = np.linspace(low, high, 201)\n    ps = norm.cdf(qs, m, s)\n    return Cdf(ps, qs, name=\"normal model\") \n```", "```py\ncdf_model = make_normal_model(sim_weights) \n```", "```py\ncdf_sim_weights = Cdf.from_seq(sim_weights, name=\"simulation\") \n```", "```py\ndef  two_cdf_plots(cdf_model, cdf_data, xlabel=\"\", **options):\n    cdf_model.plot(ls=\":\", color=\"gray\")\n    cdf_data.plot(**options)\n    decorate(xlabel=xlabel, ylabel=\"CDF\") \n```", "```py\ntwo_cdf_plots(cdf_model, cdf_sim_weights, xlabel=\"Weight (pounds)\") \n```", "```py\ndownload(\"https://github.com/AllenDowney/ThinkStats/raw/v3/nb/nsfg.py\")\ndownload(\"https://github.com/AllenDowney/ThinkStats/raw/v3/data/2002FemPreg.dct\")\ndownload(\"https://github.com/AllenDowney/ThinkStats/raw/v3/data/2002FemPreg.dat.gz\") \n```", "```py\ntry:\n    import  statadict\nexcept ImportError:\n    %pip install statadict \n```", "```py\nimport  nsfg\n\npreg = nsfg.read_fem_preg()\nbirth_weights = preg[\"totalwgt_lb\"].dropna() \n```", "```py\nm, s = np.mean(birth_weights), np.std(birth_weights)\nm, s \n```", "```py\n(np.float64(7.265628457623368), np.float64(1.40821553384062)) \n```", "```py\nfrom  scipy.stats  import trimboth\n\ntrimmed = trimboth(birth_weights, 0.01)\nm, s = np.mean(trimmed), np.std(trimmed)\nm, s \n```", "```py\n(np.float64(7.280883100022579), np.float64(1.2430657948614345)) \n```", "```py\ncdf_model = make_normal_model(trimmed) \n```", "```py\ncdf_birth_weight = Cdf.from_seq(birth_weights, name='data')\n\ntwo_cdf_plots(cdf_model, cdf_birth_weight, xlabel=\"Birth weight (pounds)\") \n```", "```py\ndef  simulate_proportionate_growth(n):\n    choices = [1.03, 1.05, 1.07]\n    gains = np.random.choice(choices, n)\n    return gains.prod() \n```", "```py\nsim_weights = [simulate_proportionate_growth(100) for i in range(1001)]\nnp.mean(sim_weights), np.std(sim_weights) \n```", "```py\n(np.float64(130.80183363824722), np.float64(20.956047434921466)) \n```", "```py\nlog_sim_weights = np.log10(sim_weights)\nm, s = np.mean(log_sim_weights), np.std(log_sim_weights)\nm, s \n```", "```py\n(np.float64(2.1111299372609933), np.float64(0.06898607064749827)) \n```", "```py\ncdf_model = make_normal_model(log_sim_weights)\ncdf_log_sim_weights = Cdf.from_seq(log_sim_weights, name=\"simulation\")\n\ntwo_cdf_plots(\n    cdf_model, cdf_log_sim_weights, xlabel=\"Pumpkin weight (log10 pounds)\"\n) \n```", "```py\ndownload(\"https://github.com/AllenDowney/ThinkStats/raw/v3/data/CDBRFS08.ASC.gz\") \n```", "```py\nfrom  thinkstats  import read_brfss\n\nbrfss = read_brfss() \n```", "```py\nadult_weights = brfss[\"wtkg2\"].dropna()\nm, s = np.mean(adult_weights), np.std(adult_weights)\nm, s \n```", "```py\n(np.float64(78.9924529968581), np.float64(19.546132387397257)) \n```", "```py\ncdf_model = make_normal_model(adult_weights)\ncdf_adult_weights = Cdf.from_seq(adult_weights, name=\"adult weight\")\n\ntwo_cdf_plots(cdf_model, cdf_adult_weights, xlabel=\"Adult weight (kilograms)\") \n```", "```py\nlog_adult_weights = np.log10(adult_weights)\ncdf_model = make_normal_model(log_adult_weights)\n\ncdf_log_adult_weights = Cdf.from_seq(log_adult_weights, name=\"log adult weight\") \n```", "```py\ntwo_cdf_plots(cdf_model, cdf_log_adult_weights, xlabel=\"Adult weight (log10 kg)\") \n```", "```py\ndownload(\"https://github.com/AllenDowney/ThinkStats/raw/v3/data/2002FemResp.dct\")\ndownload(\"https://github.com/AllenDowney/ThinkStats/raw/v3/data/2002FemResp.dat.gz\") \n```", "```py\nfrom  nsfg  import read_fem_resp\n\nresp = read_fem_resp() \n```", "```py\nolder = resp.query(\"age >= 25\")\nnum_family = older[\"numfmhh\"] \n```", "```py\nfilename = \"nhl_2023_2024.hdf\"\n\nwith pd.HDFStore(filename, \"r\") as store:\n    keys = store.keys() \n```", "```py\nintervals = []\n\nfor key in keys:\n    times = pd.read_hdf(filename, key=key)\n    if len(times) > 1:\n        intervals.extend(times.diff().dropna()) \n```", "```py\nadult_heights = brfss[\"htm3\"].dropna()\nm, s = np.mean(adult_heights), np.std(adult_heights)\nm, s \n```", "```py\n(np.float64(168.82518961012298), np.float64(10.35264015645592)) \n```"]