["```py\nfrom  os.path  import basename, exists\n\ndef  download(url):\n    filename = basename(url)\n    if not exists(filename):\n        from  urllib.request  import urlretrieve\n\n        local, _ = urlretrieve(url, filename)\n        print(\"Downloaded \" + local)\n\ndownload(\"https://github.com/AllenDowney/ThinkStats/raw/v3/nb/thinkstats.py\") \n```", "```py\ntry:\n    import  empiricaldist\nexcept ImportError:\n    %pip install empiricaldist \n```", "```py\nimport  numpy  as  np\nimport  pandas  as  pd\nimport  matplotlib.pyplot  as  plt\n\nfrom  thinkstats  import decorate \n```", "```py\nfrom  empiricaldist  import FreqTab\n\nftab = FreqTab.from_seq([1, 2, 2, 3, 5])\nftab \n```", "```py\nn = ftab.sum()\nn \n```", "```py\nnp.int64(5) \n```", "```py\npmf = ftab / n\npmf \n```", "```py\npmf.sum() \n```", "```py\nnp.float64(1.0) \n```", "```py\nfrom  empiricaldist  import Pmf\n\npmf = Pmf.from_seq([1, 2, 2, 3, 5])\npmf \n```", "```py\npmf.sum() \n```", "```py\nnp.float64(1.0) \n```", "```py\npmf[2] \n```", "```py\nnp.float64(0.4) \n```", "```py\npmf(2) \n```", "```py\nnp.float64(0.4) \n```", "```py\npmf[2] = 0.2\npmf(2) \n```", "```py\nnp.float64(0.2) \n```", "```py\npmf[2] += 0.3\npmf[2] \n```", "```py\nnp.float64(0.5) \n```", "```py\npmf[2] *= 0.5\npmf[2] \n```", "```py\nnp.float64(0.25) \n```", "```py\npmf.sum() \n```", "```py\nnp.float64(0.8500000000000001) \n```", "```py\npmf.normalize() \n```", "```py\nnp.float64(0.8500000000000001) \n```", "```py\npmf.copy() \n```", "```py\nseq = [1, 2, 2, 3, 5]\n\nn = len(seq)\nmean = np.sum(seq) / n\nmean \n```", "```py\nnp.float64(2.6) \n```", "```py\npmf = Pmf.from_seq(seq) \n```", "```py\nmean = np.sum(pmf.ps * pmf.qs)\nmean \n```", "```py\nnp.float64(2.6) \n```", "```py\npmf.mean() \n```", "```py\nnp.float64(2.6) \n```", "```py\ndeviations = pmf.qs - mean \n```", "```py\nvar = np.sum(pmf.ps * deviations**2)\nvar \n```", "```py\nnp.float64(1.84) \n```", "```py\npmf.var() \n```", "```py\nnp.float64(1.84) \n```", "```py\nnp.sqrt(var) \n```", "```py\nnp.float64(1.3564659966250536) \n```", "```py\npmf.std() \n```", "```py\nnp.float64(1.3564659966250536) \n```", "```py\npmf.mode() \n```", "```py\nnp.int64(2) \n```", "```py\nranges = pd.interval_range(start=5, end=50, freq=5, closed=\"left\")\nranges.name = \"class size\"\n\ndata = pd.DataFrame(index=ranges)\ndata[\"count\"] = [8, 8, 14, 4, 6, 12, 8, 3, 2]\ndata \n```", "```py\nsizes = ranges.left + 2\nsizes \n```", "```py\nIndex([7, 12, 17, 22, 27, 32, 37, 42, 47], dtype='int64') \n```", "```py\ncounts = data[\"count\"]\nactual_pmf = Pmf(counts, sizes, name=\"actual\")\nactual_pmf.normalize() \n```", "```py\nnp.int64(65) \n```", "```py\nactual_pmf.mean() \n```", "```py\nnp.float64(23.692307692307693) \n```", "```py\ndef  bias(pmf, name):\n    # multiply each probability by class size\n    ps = pmf.ps * pmf.qs\n\n    # make a new Pmf and normalize it\n    new_pmf = Pmf(ps, pmf.qs, name=name)\n    new_pmf.normalize()\n    return new_pmf \n```", "```py\nobserved_pmf = bias(actual_pmf, name=\"observed\") \n```", "```py\nfrom  thinkstats  import two_bar_plots\n\ntwo_bar_plots(actual_pmf, observed_pmf, width=2)\ndecorate(xlabel=\"Class size\", ylabel=\"PMF\") \n```", "```py\nobserved_pmf.mean() \n```", "```py\nnp.float64(29.123376623376622) \n```", "```py\ndef  unbias(pmf, name):\n    # divide each probability by class size\n    ps = pmf.ps / pmf.qs\n\n    new_pmf = Pmf(ps, pmf.qs, name=name)\n    new_pmf.normalize()\n    return new_pmf \n```", "```py\ndebiased_pmf = unbias(observed_pmf, \"debiased\")\ndebiased_pmf.mean() \n```", "```py\nnp.float64(23.692307692307693) \n```", "```py\ntry:\n    import  statadict\nexcept ImportError:\n    %pip install statadict \n```", "```py\ndownload(\"https://github.com/AllenDowney/ThinkStats/raw/v3/nb/nsfg.py\")\ndownload(\"https://github.com/AllenDowney/ThinkStats/raw/v3/data/2002FemPreg.dct\")\ndownload(\"https://github.com/AllenDowney/ThinkStats/raw/v3/data/2002FemPreg.dat.gz\") \n```", "```py\nfrom  nsfg  import get_nsfg_groups\n\nlive, firsts, others = get_nsfg_groups() \n```", "```py\nfirst_pmf = Pmf.from_seq(firsts[\"prglngth\"], name=\"firsts\")\nother_pmf = Pmf.from_seq(others[\"prglngth\"], name=\"others\") \n```", "```py\ntwo_bar_plots(first_pmf, other_pmf)\ndecorate(xlabel=\"Weeks\", ylabel=\"Probability\", xlim=[20, 50]) \n```", "```py\nweeks = range(35, 46)\nfirst_pmf(weeks) \n```", "```py\narray([0.03602991, 0.03897575, 0.04713347, 0.06163608, 0.4790392 ,\n       0.12145932, 0.08157716, 0.04645366, 0.01971448, 0.00521187,\n       0.00135962]) \n```", "```py\nother_pmf(weeks) \n```", "```py\narray([0.03210137, 0.03146779, 0.05216473, 0.07074974, 0.54466737,\n       0.12249208, 0.04794087, 0.02597677, 0.01288279, 0.00485744,\n       0.00084477]) \n```", "```py\ndiffs = first_pmf(weeks) - other_pmf(weeks)\ndiffs \n```", "```py\narray([ 0.00392854,  0.00750796, -0.00503126, -0.00911366, -0.06562817,\n       -0.00103276,  0.03363629,  0.02047689,  0.00683169,  0.00035443,\n        0.00051485]) \n```", "```py\nplt.bar(weeks, diffs * 100)\ndecorate(xlabel=\"Weeks\", ylabel=\"Difference (percentage points)\") \n```", "```py\ndownload(\"https://github.com/AllenDowney/ThinkStats/raw/v3/data/2002FemResp.dct\")\ndownload(\"https://github.com/AllenDowney/ThinkStats/raw/v3/data/2002FemResp.dat.gz\") \n```", "```py\nfrom  nsfg  import read_fem_resp\n\nresp = read_fem_resp()\nresp.shape \n```", "```py\n(7643, 3092) \n```", "```py\npmf.bar()\ndecorate(xlabel=\"Number of babies\", ylabel=\"PMF\") \n```", "```py\nnumbabes = resp[\"numbabes\"].replace(97, np.nan) \n```", "```py\ndeviations = numbabes - numbabes.mean()\nskewness = np.mean(deviations**3) / numbabes.std(ddof=0) ** 3\nskewness \n```", "```py\nnp.float64(1.7018914266755958) \n```"]