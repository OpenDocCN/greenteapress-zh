["```py\nfrom  os.path  import basename, exists\n\ndef  download(url):\n    filename = basename(url)\n    if not exists(filename):\n        from  urllib.request  import urlretrieve\n\n        local, _ = urlretrieve(url, filename)\n        print(\"Downloaded \" + local)\n\ndownload(\"https://github.com/AllenDowney/ThinkStats/raw/v3/nb/thinkstats.py\") \n```", "```py\ntry:\n    import  empiricaldist\nexcept ImportError:\n    %pip install empiricaldist \n```", "```py\nimport  numpy  as  np\nimport  pandas  as  pd\nimport  matplotlib.pyplot  as  plt\n\nfrom  thinkstats  import decorate \n```", "```py\ndownload(\n    \"https://raw.githubusercontent.com/allisonhorst/palmerpenguins/c19a904462482430170bfe2c718775ddb7dbb885/inst/extdata/penguins_raw.csv\"\n) \n```", "```py\npenguins = pd.read_csv(\"penguins_raw.csv\").dropna(subset=[\"Body Mass (g)\"])\npenguins.shape \n```", "```py\n(342, 17) \n```", "```py\nadelie = penguins.query('Species.str.startswith(\"Adelie\")')\nlen(adelie) \n```", "```py\n151 \n```", "```py\nxvar = \"Flipper Length (mm)\"\nyvar = \"Body Mass (g)\"\n\nflipper_length = adelie[xvar]\nbody_mass = adelie[yvar] \n```", "```py\nplt.scatter(flipper_length, body_mass, marker=\".\", alpha=0.5)\ndecorate(xlabel=xvar, ylabel=yvar) \n```", "```py\nnp.corrcoef(flipper_length, body_mass)[0, 1] \n```", "```py\nnp.float64(0.4682016942179394) \n```", "```py\nfrom  scipy.stats  import linregress\n\nresult = linregress(flipper_length, body_mass)\nresult \n```", "```py\nLinregressResult(slope=np.float64(32.83168975115009), intercept=np.float64(-2535.8368022002514), rvalue=np.float64(0.46820169421793933), pvalue=np.float64(1.3432645947790051e-09), stderr=np.float64(5.076138407990821), intercept_stderr=np.float64(964.7984274994059)) \n```", "```py\nx = flipper_length.mean()\ny = result.intercept + result.slope * x\nx, y \n```", "```py\n(np.float64(189.95364238410596), np.float64(3700.662251655629)) \n```", "```py\ndef  predict(result, xs):\n    ys = result.intercept + result.slope * xs\n    return ys \n```", "```py\nfit_xs = np.linspace(np.min(flipper_length), np.max(flipper_length))\nfit_ys = predict(result, fit_xs) \n```", "```py\nplt.scatter(flipper_length, body_mass, marker=\".\", alpha=0.5)\nplt.plot(fit_xs, fit_ys, color=\"C1\")\ndecorate(xlabel=xvar, ylabel=yvar) \n```", "```py\ndef  compute_residuals(result, xs, ys):\n    fit_ys = predict(result, xs)\n    return ys - fit_ys \n```", "```py\nresiduals = compute_residuals(result, flipper_length, body_mass) \n```", "```py\nx = flipper_length[0]\ny = predict(result, x)\nx, y \n```", "```py\n(np.float64(181.0), np.float64(3406.699042757914)) \n```", "```py\nbody_mass[0], residuals[0] \n```", "```py\n(np.float64(3750.0), np.float64(343.30095724208604)) \n```", "```py\nmse = np.mean(residuals**2)\nmse \n```", "```py\nnp.float64(163098.85902884745) \n```", "```py\ndeviations = body_mass - np.mean(body_mass) \n```", "```py\nnp.mean(deviations**2) \n```", "```py\nnp.float64(208890.28989956583) \n```", "```py\nnp.var(body_mass) \n```", "```py\nnp.float64(208890.28989956583) \n```", "```py\ndef  coefficient_of_determination(ys, residuals):\n    return 1 - np.var(residuals) / np.var(ys) \n```", "```py\nR2 = coefficient_of_determination(body_mass, residuals)\nR2 \n```", "```py\nnp.float64(0.21921282646854912) \n```", "```py\nr = np.sqrt(R2)\nr \n```", "```py\nnp.float64(0.4682016942179397) \n```", "```py\ncorr = np.corrcoef(flipper_length, body_mass)[0, 1]\ncorr \n```", "```py\nnp.float64(0.4682016942179394) \n```", "```py\nresult.rvalue \n```", "```py\nnp.float64(0.46820169421793933) \n```", "```py\nintercept = result.intercept + np.random.normal(0, 1)\nslope = result.slope + np.random.normal(0, 1) \n```", "```py\nfrom  types  import SimpleNamespace\n\nfake_result = SimpleNamespace(intercept=intercept, slope=slope)\nfake_result \n```", "```py\nnamespace(intercept=np.float64(-2533.193389187175),\n          slope=np.float64(32.15393529728294)) \n```", "```py\nfake_residuals = compute_residuals(fake_result, flipper_length, body_mass)\nfake_mse = np.mean(fake_residuals**2) \n```", "```py\nmse, fake_mse, fake_mse > mse \n```", "```py\n(np.float64(163098.85902884745), np.float64(179019.20812685465), np.True_) \n```", "```py\ndef  least_squares(xs, ys):\n    xbar = np.mean(xs)\n    ybar = np.mean(ys)\n\n    xdev = xs - xbar\n    ydev = ys - ybar\n\n    slope = np.sum(xdev * ydev) / np.sum(xdev**2)\n    intercept = ybar - slope * xbar\n\n    return intercept, slope \n```", "```py\nintercept, slope = least_squares(flipper_length, body_mass)\nintercept, slope \n```", "```py\n(np.float64(-2535.8368022002524), np.float64(32.831689751150094)) \n```", "```py\nnp.allclose([intercept, slope], [result.intercept, result.slope]) \n```", "```py\nTrue \n```", "```py\ndef  resample(df):\n    n = len(df)\n    return df.sample(n, replace=True) \n```", "```py\ndef  estimate_slope(df):\n    xs, ys = df[\"Flipper Length (mm)\"], df[\"Body Mass (g)\"]\n    result = linregress(xs, ys)\n    return result.slope \n```", "```py\n# Seed the random number generator so we get the same results every time\n\nnp.random.seed(1) \n```", "```py\nresampled_slopes = [estimate_slope(resample(adelie)) for i in range(1001)] \n```", "```py\nfrom  thinkstats  import plot_kde\n\nplot_kde(resampled_slopes)\ndecorate(xlabel=\"Slope of the fitted line (g / mm)\", ylabel=\"Density\") \n```", "```py\nci90 = np.percentile(resampled_slopes, [5, 95])\nprint(result.slope, ci90) \n```", "```py\n32.83168975115009 [25.39604591 40.21054526] \n```", "```py\nstderr = np.std(resampled_slopes)\nstderr \n```", "```py\nnp.float64(4.570238986584832) \n```", "```py\nresult.stderr \n```", "```py\nnp.float64(5.076138407990821) \n```", "```py\ndef  fit_line(df, fit_xs):\n    xs, ys = df[\"Flipper Length (mm)\"], df[\"Body Mass (g)\"]\n    result = linregress(xs, ys)\n    fit_ys = predict(result, fit_xs)\n    return fit_ys \n```", "```py\nxs = adelie[\"Flipper Length (mm)\"]\nfit_xs = np.linspace(np.min(xs), np.max(xs)) \n```", "```py\nplt.scatter(flipper_length, body_mass, marker=\".\", alpha=0.5)\n\nfor i in range(101):\n    fit_ys = fit_line(resample(adelie), fit_xs)\n    plt.plot(fit_xs, fit_ys, color=\"C1\", alpha=0.05)\n\ndecorate(xlabel=xvar, ylabel=yvar) \n```", "```py\nfitted_ys = [fit_line(resample(adelie), fit_xs) for i in range(1001)] \n```", "```py\nlow, median, high = np.percentile(fitted_ys, [5, 50, 95], axis=0) \n```", "```py\nplt.scatter(flipper_length, body_mass, marker=\".\", alpha=0.5)\n\nplt.fill_between(fit_xs, low, high, color=\"C1\", lw=0, alpha=0.2)\nplt.plot(fit_xs, median, color=\"C1\")\n\ndecorate(xlabel=xvar, ylabel=yvar) \n```", "```py\ndownload(\"https://github.com/AllenDowney/ThinkStats/raw/v3/data/CDBRFS08.ASC.gz\") \n```", "```py\nfrom  thinkstats  import read_brfss\n\nbrfss = read_brfss() \n```", "```py\nvalid = brfss.dropna(subset=[\"htm3\", \"wtkg2\"])\nheights, weights = valid[\"htm3\"], valid[\"wtkg2\"] \n```", "```py\nresult_brfss = linregress(heights, weights)\nresult_brfss.intercept, result_brfss.slope \n```", "```py\n(np.float64(-82.65926054409877), np.float64(0.957074585033226)) \n```", "```py\nfit_xs = np.linspace(heights.min(), heights.max())\nfit_ys = predict(result_brfss, fit_xs) \n```", "```py\nfrom  thinkstats  import jitter\n\njittered_heights = jitter(heights, 2)\njittered_weights = jitter(weights, 1.5) \n```", "```py\nm, s = heights.mean(), heights.std()\nxlim = m - 4 * s, m + 4 * s\nylim = 0, 200 \n```", "```py\nplt.scatter(jittered_heights, jittered_weights, alpha=0.01, s=0.1)\nplt.plot(fit_xs, fit_ys, color=\"C1\")\ndecorate(xlabel=\"Height (cm)\", ylabel=\"Weight (kg)\", xlim=xlim, ylim=ylim) \n```", "```py\nresiduals = compute_residuals(result_brfss, heights, weights) \n```", "```py\nfrom  thinkstats  import make_pmf\n\npmf_kde = make_pmf(residuals, -60, 120)\npmf_kde.plot()\n\ndecorate(xlabel=\"Residual (kg)\", ylabel=\"Density\") \n```", "```py\nlog_weights = np.log10(weights)\nresult_brfss2 = linregress(heights, log_weights)\nresult_brfss2.intercept, result_brfss2.slope \n```", "```py\n(np.float64(0.9930804163932876), np.float64(0.005281454169417777)) \n```", "```py\nfit_xs = np.linspace(heights.min(), heights.max())\nfit_ys = predict(result_brfss2, fit_xs) \n```", "```py\njittered_log_weights = jitter(log_weights, 1.5)\nplt.scatter(jittered_heights, jittered_log_weights, alpha=0.01, s=0.1)\nplt.plot(fit_xs, fit_ys, color=\"C1\")\ndecorate(xlabel=\"Height (cm)\", ylabel=\"Weight (log10 kg)\", xlim=xlim) \n```", "```py\nresiduals = compute_residuals(result_brfss2, heights, log_weights) \n```", "```py\npmf_kde = make_pmf(residuals, -0.6, 0.6)\npmf_kde.plot()\n\ndecorate(xlabel=\"Residual (kg)\", ylabel=\"Density\") \n```", "```py\nresult_brfss.rvalue, result_brfss2.rvalue \n```", "```py\n(np.float64(0.5087364789734582), np.float64(0.5317282605983435)) \n```", "```py\nresult_brfss.rvalue**2, result_brfss2.rvalue**2 \n```", "```py\n(np.float64(0.2588128050383119), np.float64(0.28273494311893993)) \n```", "```py\nplt.scatter(jittered_heights, jittered_weights, alpha=0.01, s=0.1)\nplt.plot(fit_xs, 10**fit_ys, color=\"C1\")\ndecorate(xlabel=\"Height (cm)\", ylabel=\"Weight (kg)\", xlim=xlim, ylim=ylim) \n```", "```py\nxvar = \"Culmen Length (mm)\"\nyvar = \"Body Mass (g)\"\n\nculmen_length = adelie[xvar]\nbody_mass = adelie[yvar] \n```", "```py\nheights_m = heights / 100\nbmis = weights / heights_m**2 \n```"]