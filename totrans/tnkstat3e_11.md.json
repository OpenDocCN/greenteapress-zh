["```py\nfrom  os.path  import basename, exists\n\ndef  download(url):\n    filename = basename(url)\n    if not exists(filename):\n        from  urllib.request  import urlretrieve\n\n        local, _ = urlretrieve(url, filename)\n        print(\"Downloaded \" + local)\n\ndownload(\"https://github.com/AllenDowney/ThinkStats/raw/v3/nb/thinkstats.py\") \n```", "```py\ntry:\n    import  empiricaldist\nexcept ImportError:\n    %pip install empiricaldist \n```", "```py\nimport  numpy  as  np\nimport  pandas  as  pd\nimport  matplotlib.pyplot  as  plt\n\nfrom  thinkstats  import decorate \n```", "```py\nn = 250\np = 0.5\n\ndef  abs_deviation(heads):\n    expected = n * p\n    return np.abs(heads - expected) \n```", "```py\nheads = 140\ntails = 110\n\nobserved_stat = abs_deviation(heads)\nobserved_stat \n```", "```py\nnp.float64(15.0) \n```", "```py\ndef  simulate_flips():\n    flips = np.random.choice([\"H\", \"T\"], size=n)\n    heads = np.sum(flips == \"H\")\n    return heads \n```", "```py\nnp.random.seed(1) \n```", "```py\nsimulate_flips() \n```", "```py\nnp.int64(119) \n```", "```py\nsimulated_stats = [abs_deviation(simulate_flips()) for i in range(10001)] \n```", "```py\nfrom  empiricaldist  import Pmf\n\npmf_effects = Pmf.from_seq(simulated_stats)\npmf_effects.bar()\n\ndecorate(xlabel=\"Absolute deviation\", ylabel=\"PMF\") \n```", "```py\n(np.array(simulated_stats) >= 15).mean() * 100 \n```", "```py\nnp.float64(7.079292070792921) \n```", "```py\ndownload(\"https://github.com/AllenDowney/ThinkStats/raw/v3/nb/nsfg.py\")\ndownload(\"https://github.com/AllenDowney/ThinkStats/raw/v3/data/2002FemPreg.dct\")\ndownload(\"https://github.com/AllenDowney/ThinkStats/raw/v3/data/2002FemPreg.dat.gz\") \n```", "```py\ntry:\n    import  statadict\nexcept ImportError:\n    %pip install statadict \n```", "```py\nfrom  nsfg  import get_nsfg_groups\n\nlive, firsts, others = get_nsfg_groups() \n```", "```py\ndata = firsts[\"prglngth\"].values, others[\"prglngth\"].values \n```", "```py\ndef  abs_diff_means(data):\n    group1, group2 = data\n    diff = np.mean(group1) - np.mean(group2)\n    return np.abs(diff) \n```", "```py\nobserved_diff = abs_diff_means(data)\nobserved_diff \n```", "```py\nnp.float64(0.07803726677754952) \n```", "```py\ndef  simulate_groups(data):\n    group1, group2 = data\n    n, m = len(group1), len(group2)\n\n    pool = np.hstack(data)\n    np.random.shuffle(pool)\n    return pool[:n], pool[-m:] \n```", "```py\nabs_diff_means(simulate_groups(data)) \n```", "```py\nnp.float64(0.031193045602279312) \n```", "```py\nsimulated_diffs = [abs_diff_means(simulate_groups(data)) for i in range(1001)] \n```", "```py\nfrom  scipy.stats  import gaussian_kde\nfrom  empiricaldist  import Pmf\n\ndef  make_pmf(sample, low, high):\n    kde = gaussian_kde(sample)\n    qs = np.linspace(low, high, 201)\n    ps = kde(qs)\n    return Pmf(ps, qs) \n```", "```py\nfrom  thinkstats  import underride\n\ndef  fill_tail(pmf, observed, side, **options):\n  \"\"\"Fill the area under a PMF, right or left of an observed value.\"\"\"\n    options = underride(options, alpha=0.3)\n\n    if side == \"right\":\n        condition = pmf.qs >= observed\n    elif side == \"left\":\n        condition = pmf.qs <= observed\n\n    series = pmf[condition]\n    plt.fill_between(series.index, 0, series, **options) \n```", "```py\npmf = make_pmf(simulated_diffs, 0, 0.2)\npmf.plot()\nfill_tail(pmf, observed_diff, \"right\")\ndecorate(xlabel=\"Absolute difference in means (weeks)\", ylabel=\"Density\") \n```", "```py\ndef  compute_p_value(simulated, observed):\n  \"\"\"Fraction of simulated values as big or bigger than the observed value.\"\"\"\n    return (np.asarray(simulated) >= observed).mean() \n```", "```py\ncompute_p_value(simulated_diffs, observed_diff) \n```", "```py\nnp.float64(0.1838161838161838) \n```", "```py\ndef  abs_diff_stds(data):\n    group1, group2 = data\n    diff = np.std(group1) - np.std(group2)\n    return np.abs(diff) \n```", "```py\nobserved_diff = abs_diff_stds(data)\nobserved_diff \n```", "```py\nnp.float64(0.17600895913991677) \n```", "```py\nsimulated_diffs = [abs_diff_stds(simulate_groups(data)) for i in range(1001)] \n```", "```py\npmf = make_pmf(simulated_diffs, 0, 0.5)\npmf.plot()\nfill_tail(pmf, observed_diff, \"right\")\ndecorate(xlabel=\"Absolute difference in std (weeks)\", ylabel=\"Density\") \n```", "```py\ncompute_p_value(simulated_diffs, observed_diff) \n```", "```py\nnp.float64(0.17082917082917082) \n```", "```py\nvalid = live.dropna(subset=[\"agepreg\", \"totalwgt_lb\"])\nvalid.shape \n```", "```py\n(9038, 244) \n```", "```py\nages = valid[\"agepreg\"]\nbirthweights = valid[\"totalwgt_lb\"] \n```", "```py\ndef  abs_correlation(data):\n    xs, ys = data\n    corr = np.corrcoef(xs, ys)[0, 1]\n    return np.abs(corr) \n```", "```py\ndata = ages, birthweights\nobserved_corr = abs_correlation(data)\nobserved_corr \n```", "```py\nnp.float64(0.0688339703541091) \n```", "```py\ndef  permute(data):\n    xs, ys = data\n    new_xs = xs.values.copy()\n    np.random.shuffle(new_xs)\n    return new_xs, ys \n```", "```py\nabs_correlation(permute(data)) \n```", "```py\nnp.float64(0.0019269515502894237) \n```", "```py\nsimulated_corrs = [abs_correlation(permute(data)) for i in range(1001)] \n```", "```py\npmf = make_pmf(simulated_corrs, 0, 0.07)\npmf.plot()\nplt.axvline(observed_corr, color=\"gray\", ls=\":\")\ndecorate(xlabel=\"Absolute value of correlation\", ylabel=\"Density\") \n```", "```py\ncompute_p_value(simulated_corrs, observed_corr) \n```", "```py\nnp.float64(0.0) \n```", "```py\nfrom  empiricaldist  import Hist\n\nqs = np.arange(1, 7)\nfreqs = [8, 9, 19, 5, 8, 11]\nobserved = Hist(freqs, qs)\nobserved.index.name = \"outcome\"\nobserved \n```", "```py\nnum_rolls = observed.sum()\noutcomes = observed.qs\nexpected = Hist(num_rolls / 6, outcomes) \n```", "```py\ndef  total_abs_deviation(observed):\n    return np.sum(np.abs(observed - expected)) \n```", "```py\nobserved_dev = total_abs_deviation(observed)\nobserved_dev \n```", "```py\nnp.float64(20.0) \n```", "```py\ndef  simulate_dice(observed):\n    num_rolls = np.sum(observed)\n    rolls = np.random.choice(observed.qs, num_rolls, replace=True)\n    hist = Hist.from_seq(rolls)\n    return hist \n```", "```py\nsimulated_devs = [total_abs_deviation(simulate_dice(observed)) for i in range(1001)] \n```", "```py\npmf_devs = Pmf.from_seq(simulated_devs)\npmf_devs.bar()\n\ndecorate(xlabel=\"Total absolute deviation\", ylabel=\"PMF\") \n```", "```py\ncompute_p_value(simulated_devs, observed_dev) \n```", "```py\nnp.float64(0.13086913086913088) \n```", "```py\ndef  chi_squared_stat(observed):\n    diffs = (observed - expected) ** 2\n    return np.sum(diffs / expected) \n```", "```py\nobserved_chi2 = chi_squared_stat(observed)\nobserved_chi2 \n```", "```py\nnp.float64(11.6) \n```", "```py\nsimulated_chi2 = [chi_squared_stat(simulate_dice(observed)) for i in range(1001)] \n```", "```py\npmf = make_pmf(simulated_chi2, 0, 20)\npmf.plot()\nfill_tail(pmf, observed_chi2, \"right\")\ndecorate(xlabel=\"Chi-Squared statistic\", ylabel=\"Density\") \n```", "```py\ncompute_p_value(simulated_chi2, observed_chi2) \n```", "```py\nnp.float64(0.04495504495504495) \n```", "```py\ndownload(\n    \"https://raw.githubusercontent.com/allisonhorst/palmerpenguins/c19a904462482430170bfe2c718775ddb7dbb885/inst/extdata/penguins_raw.csv\"\n) \n```", "```py\npenguins = pd.read_csv(\"penguins_raw.csv\").dropna(subset=[\"Body Mass (g)\"])\nchinstrap = penguins.query('Species.str.startswith(\"Chinstrap\")')\nchinstrap.shape \n```", "```py\n(68, 17) \n```", "```py\nmale = chinstrap.query(\"Sex == 'MALE'\")\nweights_male = male[\"Body Mass (g)\"] / 1000\nweights_male.mean() \n```", "```py\nnp.float64(3.9389705882352937) \n```", "```py\nfemale = chinstrap.query(\"Sex == 'FEMALE'\")\nweights_female = female[\"Body Mass (g)\"] / 1000\nweights_female.mean() \n```", "```py\nnp.float64(3.5272058823529413) \n```", "```py\ndata = female[\"Culmen Depth (mm)\"], female[\"Culmen Length (mm)\"] \n```", "```py\nobserved_corr = abs_correlation(data)\nobserved_corr \n```", "```py\nnp.float64(0.2563170802728449) \n```"]