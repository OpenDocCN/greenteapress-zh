["```py\nfrom  os.path  import basename, exists\n\ndef  download(url):\n    filename = basename(url)\n    if not exists(filename):\n        from  urllib.request  import urlretrieve\n\n        local, _ = urlretrieve(url, filename)\n        print(\"Downloaded \" + local)\n\ndownload(\"https://github.com/AllenDowney/ThinkStats/raw/v3/nb/thinkstats.py\") \n```", "```py\ntry:\n    import  empiricaldist\nexcept ImportError:\n    %pip install empiricaldist \n```", "```py\nimport  numpy  as  np\nimport  pandas  as  pd\nimport  matplotlib.pyplot  as  plt\n\nfrom  thinkstats  import decorate \n```", "```py\ndownload(\"https://github.com/AllenDowney/ThinkStats/raw/v3/data/nlsy97-extract.csv.gz\") \n```", "```py\nmissing_codes = [-1, -2, -3, -4, -5]\nnlsy = pd.read_csv(\"nlsy97-extract.csv.gz\").replace(missing_codes, np.nan)\nnlsy.shape \n```", "```py\n(8984, 34) \n```", "```py\nnlsy.head() \n```", "```py\nnlsy[\"sat_verbal\"] = nlsy[\"R9793800\"]\nnlsy[\"sat_math\"] = nlsy[\"R9793900\"] \n```", "```py\ncolumns = [\"sat_verbal\", \"sat_math\"]\n\nfor column in columns:\n    invalid = nlsy[column] < 200\n    nlsy.loc[invalid, column] = np.nan \n```", "```py\nnlsy_valid = nlsy.dropna(subset=columns).copy()\nnlsy_valid.shape \n```", "```py\n(1398, 36) \n```", "```py\nsat_verbal = nlsy_valid[\"sat_verbal\"]\nsat_verbal.mean(), sat_verbal.std() \n```", "```py\n(np.float64(501.80972818311875), np.float64(108.36562024213643)) \n```", "```py\nsat_math = nlsy_valid[\"sat_math\"]\nsat_math.mean(), sat_math.std() \n```", "```py\n(np.float64(503.0829756795422), np.float64(109.8329973731453)) \n```", "```py\nplt.scatter(sat_verbal, sat_math)\n\ndecorate(xlabel=\"SAT Verbal\", ylabel=\"SAT Math\") \n```", "```py\nplt.scatter(sat_verbal, sat_math, s=5)\n\ndecorate(xlabel=\"SAT Verbal\", ylabel=\"SAT Math\") \n```", "```py\ndef  jitter(seq, std=1):\n    n = len(seq)\n    return np.random.normal(0, std, n) + seq \n```", "```py\nsat_verbal_jittered = jitter(sat_verbal, 3)\nsat_math_jittered = jitter(sat_math, 3) \n```", "```py\nplt.scatter(sat_verbal_jittered, sat_math_jittered, s=5)\n\ndecorate(xlabel=\"SAT Verbal\", ylabel=\"SAT Math\") \n```", "```py\nplt.scatter(sat_verbal_jittered, sat_math_jittered, s=5, alpha=0.2)\n\ndecorate(xlabel=\"SAT Verbal\", ylabel=\"SAT Math\") \n```", "```py\ndeciles = pd.qcut(nlsy_valid[\"sat_verbal\"], 10, labels=False) + 1\ndeciles.value_counts().sort_index() \n```", "```py\nsat_verbal\n1     142\n2     150\n3     139\n4     140\n5     159\n6     130\n7     148\n8     121\n9     138\n10    131\nName: count, dtype: int64 \n```", "```py\ndf_groupby = nlsy_valid.groupby(deciles)\ndf_groupby \n```", "```py\n<pandas.core.groupby.generic.DataFrameGroupBy object at 0x7fa0adfd49d0> \n```", "```py\nseries_groupby = df_groupby[\"sat_math\"]\nseries_groupby \n```", "```py\n<pandas.core.groupby.generic.SeriesGroupBy object at 0x7fa0b01af7d0> \n```", "```py\nlow = series_groupby.quantile(0.1)\nmedian = series_groupby.quantile(0.5)\nhigh = series_groupby.quantile(0.9) \n```", "```py\nxs = median.index\nplt.fill_between(xs, low, high, alpha=0.2)\nplt.plot(xs, median, label=\"median\")\n\ndecorate(xlabel=\"SAT Verbal Decile\", ylabel=\"SAT Math\") \n```", "```py\nxs = df_groupby[\"sat_verbal\"].median()\n\nplt.fill_between(xs, low, high, alpha=0.2)\nplt.plot(xs, median, color=\"C0\", label=\"median\")\n\ndecorate(xlabel=\"SAT Verbal\", ylabel=\"SAT Math\") \n```", "```py\nnlsy[\"piat_math\"] = nlsy[\"R1318200\"]\nnlsy[\"piat_math\"].describe() \n```", "```py\ncount    6044.000000\nmean       93.903706\nstd        14.631148\nmin        55.000000\n25%        84.000000\n50%        92.000000\n75%       103.000000\nmax       145.000000\nName: piat_math, dtype: float64 \n```", "```py\nfrom  empiricaldist  import Cdf\n\ncdf_piat_math = Cdf.from_seq(nlsy[\"piat_math\"], name=\"PIAT math\")\ncdf_piat_math.step()\ndecorate(ylabel=\"CDF\") \n```", "```py\nfrom  thinkstats  import scatter\n\nscatter(nlsy, \"piat_math\", \"sat_math\")\n\ndecorate(xlabel=\"PIAT Math\", ylabel=\"SAT Math\") \n```", "```py\nscatter(nlsy, \"piat_math\", \"sat_verbal\")\n\ndecorate(xlabel=\"PIAT Math\", ylabel=\"SAT Verbal\") \n```", "```py\ndef  standardize(xs):\n  \"\"\"Standardizes a sequence of numbers.\n\n xs: sequence of numbers\n\n returns: NumPy array\n \"\"\"\n    return (xs - np.mean(xs)) / np.std(xs) \n```", "```py\nvalid = nlsy.dropna(subset=[\"piat_math\", \"sat_math\"])\npiat_math = valid[\"piat_math\"]\nsat_math = valid[\"sat_math\"] \n```", "```py\npiat_math_standard = standardize(piat_math)\nnp.mean(piat_math_standard), np.std(piat_math_standard) \n```", "```py\n(np.float64(-2.4321756236287047e-16), np.float64(1.0)) \n```", "```py\nsat_math_standard = standardize(sat_math)\nnp.mean(sat_math_standard), np.std(sat_math_standard) \n```", "```py\n(np.float64(-1.737268302591932e-16), np.float64(0.9999999999999998)) \n```", "```py\nnp.mean(piat_math_standard * sat_math_standard) \n```", "```py\nnp.float64(0.639735816517885) \n```", "```py\nnp.mean(sat_math_standard * piat_math_standard) \n```", "```py\nnp.float64(0.639735816517885) \n```", "```py\nnp.corrcoef(piat_math, sat_math) \n```", "```py\narray([[1\\.        , 0.63973582],\n       [0.63973582, 1\\.        ]]) \n```", "```py\nfrom  thinkstats  import corrcoef\n\ncorrcoef(nlsy, \"piat_math\", \"sat_math\") \n```", "```py\nnp.float64(0.6397358165178849) \n```", "```py\ncorrcoef(nlsy, \"piat_math\", \"sat_verbal\") \n```", "```py\nnp.float64(0.509413914696731) \n```", "```py\nnp.random.seed(17)\nxs = np.random.normal(size=300)\nys = np.random.normal(size=300) \n```", "```py\nnlsy[\"income\"] = nlsy[\"U4949700\"]\nnlsy[\"income\"].describe() \n```", "```py\ncount      6051.000000\nmean     104274.239960\nstd      108470.571497\nmin           0.000000\n25%       38000.000000\n50%       80000.000000\n75%      134157.000000\nmax      599728.000000\nName: income, dtype: float64 \n```", "```py\ncdf_income = Cdf.from_seq(nlsy[\"income\"])\ncdf_income.step()\n\ndecorate(xlabel=\"Income (USD)\", ylabel=\"CDF\") \n```", "```py\nscatter(nlsy, \"piat_math\", \"income\")\n\ndecorate(xlabel=\"PIAT math\", ylabel=\"Gross Family Income (USD)\") \n```", "```py\ncorrcoef(nlsy, \"piat_math\", \"income\") \n```", "```py\nnp.float64(0.30338587288641233) \n```", "```py\nvalid = nlsy.dropna(subset=[\"piat_math\", \"income\"])\n\npiat_math_rank = valid[\"piat_math\"].rank(method=\"first\")\nincome_rank = valid[\"income\"].rank(method=\"first\") \n```", "```py\nincome_rank.min(), income_rank.max() \n```", "```py\n(np.float64(1.0), np.float64(4101.0)) \n```", "```py\nplt.scatter(piat_math_rank, income_rank, s=5, alpha=0.2)\n\ndecorate(xlabel=\"PIAT math rank\", ylabel=\"Income rank\") \n```", "```py\nnp.corrcoef(piat_math_rank, income_rank)[0, 1] \n```", "```py\nnp.float64(0.38148396696764847) \n```", "```py\nfrom  thinkstats  import rankcorr\n\nrankcorr(nlsy, \"piat_math\", \"income\") \n```", "```py\nnp.float64(0.38474681505344815) \n```", "```py\nfrom  scipy.stats  import spearmanr\n\nspearmanr(valid[\"piat_math\"], valid[\"income\"]).statistic \n```", "```py\nnp.float64(0.38474681505344815) \n```", "```py\nfrom  thinkstats  import decile_plot\n\ndecile_plot(nlsy, \"sat_verbal\", \"sat_math\")\ndecorate(xlabel=\"SAT Verbal\", ylabel=\"SAT Math\") \n```", "```py\nmissing_codes = [-6, -7, -8, -9]\nnlsy[\"gpa\"] = nlsy[\"R9871900\"].replace(missing_codes, np.nan) / 100\nnlsy[\"gpa\"].describe() \n```", "```py\ncount    6004.000000\nmean        2.818408\nstd         0.616357\nmin         0.100000\n25%         2.430000\n50%         2.860000\n75%         3.260000\nmax         4.170000\nName: gpa, dtype: float64 \n```", "```py\ncdf_income = Cdf.from_seq(nlsy[\"gpa\"])\ncdf_income.step()\ndecorate(xlabel=\"GPA\", ylabel=\"CDF\") \n```", "```py\nnlsy[\"degree\"] = nlsy[\"Z9083900\"]\nnlsy[\"degree\"].value_counts().sort_index() \n```", "```py\ndegree\n0.0     877\n1.0    1167\n2.0    3531\n3.0     766\n4.0    1713\n5.0     704\n6.0      64\n7.0     130\nName: count, dtype: int64 \n```", "```py\npositions = [0, 1, 2, 3, 4, 5, 6, 7]\nlabels = [\n    \"None\",\n    \"GED\",\n    \"High school diploma\",\n    \"Associate's degree\",\n    \"Bachelor's degree\",\n    \"Master's degree\",\n    \"PhD\",\n    \"Professional degree\",\n] \n```", "```py\nfrom  empiricaldist  import Pmf\n\nPmf.from_seq(nlsy[\"degree\"]).bar()\n\nplt.xticks(positions, labels, rotation=30, ha=\"right\")\ndecorate(ylabel=\"PMF\") \n```", "```py\ndownload(\"https://github.com/AllenDowney/ThinkStats/raw/v3/data/CDBRFS08.ASC.gz\") \n```", "```py\nfrom  thinkstats  import read_brfss\n\nbrfss = read_brfss()\nbrfss[\"htm3\"].describe() \n```", "```py\ncount    409129.000000\nmean        168.825190\nstd          10.352653\nmin          61.000000\n25%         160.000000\n50%         168.000000\n75%         175.000000\nmax         236.000000\nName: htm3, dtype: float64 \n```"]